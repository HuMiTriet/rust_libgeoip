/* automatically generated by rust-bindgen 0.70.1 */

use std::{
    ffi::CStr,
    fs::File,
    io::{self, Read, Seek, SeekFrom},
    os::linux::fs::MetadataExt,
    ptr::{self, addr_of},
};

use memmap2::{Mmap, MmapMut};

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const _SYS_TYPES_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC23: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_TIME_BITS64: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const __GLIBC_USE_C23_STRTOL: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 40;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _ARPA_INET_H: u32 = 1;
pub const _NETINET_IN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const _SYS_SOCKET_H: u32 = 1;
pub const __iovec_defined: u32 = 1;
pub const PF_UNSPEC: u32 = 0;
pub const PF_LOCAL: u32 = 1;
pub const PF_UNIX: u32 = 1;
pub const PF_FILE: u32 = 1;
pub const PF_INET: u32 = 2;
pub const PF_AX25: u32 = 3;
pub const PF_IPX: u32 = 4;
pub const PF_APPLETALK: u32 = 5;
pub const PF_NETROM: u32 = 6;
pub const PF_BRIDGE: u32 = 7;
pub const PF_ATMPVC: u32 = 8;
pub const PF_X25: u32 = 9;
pub const PF_INET6: u32 = 10;
pub const PF_ROSE: u32 = 11;
pub const PF_DECnet: u32 = 12;
pub const PF_NETBEUI: u32 = 13;
pub const PF_SECURITY: u32 = 14;
pub const PF_KEY: u32 = 15;
pub const PF_NETLINK: u32 = 16;
pub const PF_ROUTE: u32 = 16;
pub const PF_PACKET: u32 = 17;
pub const PF_ASH: u32 = 18;
pub const PF_ECONET: u32 = 19;
pub const PF_ATMSVC: u32 = 20;
pub const PF_RDS: u32 = 21;
pub const PF_SNA: u32 = 22;
pub const PF_IRDA: u32 = 23;
pub const PF_PPPOX: u32 = 24;
pub const PF_WANPIPE: u32 = 25;
pub const PF_LLC: u32 = 26;
pub const PF_IB: u32 = 27;
pub const PF_MPLS: u32 = 28;
pub const PF_CAN: u32 = 29;
pub const PF_TIPC: u32 = 30;
pub const PF_BLUETOOTH: u32 = 31;
pub const PF_IUCV: u32 = 32;
pub const PF_RXRPC: u32 = 33;
pub const PF_ISDN: u32 = 34;
pub const PF_PHONET: u32 = 35;
pub const PF_IEEE802154: u32 = 36;
pub const PF_CAIF: u32 = 37;
pub const PF_ALG: u32 = 38;
pub const PF_NFC: u32 = 39;
pub const PF_VSOCK: u32 = 40;
pub const PF_KCM: u32 = 41;
pub const PF_QIPCRTR: u32 = 42;
pub const PF_SMC: u32 = 43;
pub const PF_XDP: u32 = 44;
pub const PF_MCTP: u32 = 45;
pub const PF_MAX: u32 = 46;
pub const AF_UNSPEC: u32 = 0;
pub const AF_LOCAL: u32 = 1;
pub const AF_UNIX: u32 = 1;
pub const AF_FILE: u32 = 1;
pub const AF_INET: u32 = 2;
pub const AF_AX25: u32 = 3;
pub const AF_IPX: u32 = 4;
pub const AF_APPLETALK: u32 = 5;
pub const AF_NETROM: u32 = 6;
pub const AF_BRIDGE: u32 = 7;
pub const AF_ATMPVC: u32 = 8;
pub const AF_X25: u32 = 9;
pub const AF_INET6: u32 = 10;
pub const AF_ROSE: u32 = 11;
pub const AF_DECnet: u32 = 12;
pub const AF_NETBEUI: u32 = 13;
pub const AF_SECURITY: u32 = 14;
pub const AF_KEY: u32 = 15;
pub const AF_NETLINK: u32 = 16;
pub const AF_ROUTE: u32 = 16;
pub const AF_PACKET: u32 = 17;
pub const AF_ASH: u32 = 18;
pub const AF_ECONET: u32 = 19;
pub const AF_ATMSVC: u32 = 20;
pub const AF_RDS: u32 = 21;
pub const AF_SNA: u32 = 22;
pub const AF_IRDA: u32 = 23;
pub const AF_PPPOX: u32 = 24;
pub const AF_WANPIPE: u32 = 25;
pub const AF_LLC: u32 = 26;
pub const AF_IB: u32 = 27;
pub const AF_MPLS: u32 = 28;
pub const AF_CAN: u32 = 29;
pub const AF_TIPC: u32 = 30;
pub const AF_BLUETOOTH: u32 = 31;
pub const AF_IUCV: u32 = 32;
pub const AF_RXRPC: u32 = 33;
pub const AF_ISDN: u32 = 34;
pub const AF_PHONET: u32 = 35;
pub const AF_IEEE802154: u32 = 36;
pub const AF_CAIF: u32 = 37;
pub const AF_ALG: u32 = 38;
pub const AF_NFC: u32 = 39;
pub const AF_VSOCK: u32 = 40;
pub const AF_KCM: u32 = 41;
pub const AF_QIPCRTR: u32 = 42;
pub const AF_SMC: u32 = 43;
pub const AF_XDP: u32 = 44;
pub const AF_MCTP: u32 = 45;
pub const AF_MAX: u32 = 46;
pub const SOL_RAW: u32 = 255;
pub const SOL_DECNET: u32 = 261;
pub const SOL_X25: u32 = 262;
pub const SOL_PACKET: u32 = 263;
pub const SOL_ATM: u32 = 264;
pub const SOL_AAL: u32 = 265;
pub const SOL_IRDA: u32 = 266;
pub const SOL_NETBEUI: u32 = 267;
pub const SOL_LLC: u32 = 268;
pub const SOL_DCCP: u32 = 269;
pub const SOL_NETLINK: u32 = 270;
pub const SOL_TIPC: u32 = 271;
pub const SOL_RXRPC: u32 = 272;
pub const SOL_PPPOL2TP: u32 = 273;
pub const SOL_BLUETOOTH: u32 = 274;
pub const SOL_PNPIPE: u32 = 275;
pub const SOL_RDS: u32 = 276;
pub const SOL_IUCV: u32 = 277;
pub const SOL_CAIF: u32 = 278;
pub const SOL_ALG: u32 = 279;
pub const SOL_NFC: u32 = 280;
pub const SOL_KCM: u32 = 281;
pub const SOL_TLS: u32 = 282;
pub const SOL_XDP: u32 = 283;
pub const SOL_MPTCP: u32 = 284;
pub const SOL_MCTP: u32 = 285;
pub const SOL_SMC: u32 = 286;
pub const SOL_VSOCK: u32 = 287;
pub const SOMAXCONN: u32 = 4096;
pub const _BITS_SOCKADDR_H: u32 = 1;
pub const _SS_SIZE: u32 = 128;
pub const __BITS_PER_LONG: u32 = 64;
pub const __BITS_PER_LONG_LONG: u32 = 64;
pub const FIOSETOWN: u32 = 35073;
pub const SIOCSPGRP: u32 = 35074;
pub const FIOGETOWN: u32 = 35075;
pub const SIOCGPGRP: u32 = 35076;
pub const SIOCATMARK: u32 = 35077;
pub const SIOCGSTAMP_OLD: u32 = 35078;
pub const SIOCGSTAMPNS_OLD: u32 = 35079;
pub const SOL_SOCKET: u32 = 1;
pub const SO_DEBUG: u32 = 1;
pub const SO_REUSEADDR: u32 = 2;
pub const SO_TYPE: u32 = 3;
pub const SO_ERROR: u32 = 4;
pub const SO_DONTROUTE: u32 = 5;
pub const SO_BROADCAST: u32 = 6;
pub const SO_SNDBUF: u32 = 7;
pub const SO_RCVBUF: u32 = 8;
pub const SO_SNDBUFFORCE: u32 = 32;
pub const SO_RCVBUFFORCE: u32 = 33;
pub const SO_KEEPALIVE: u32 = 9;
pub const SO_OOBINLINE: u32 = 10;
pub const SO_NO_CHECK: u32 = 11;
pub const SO_PRIORITY: u32 = 12;
pub const SO_LINGER: u32 = 13;
pub const SO_BSDCOMPAT: u32 = 14;
pub const SO_REUSEPORT: u32 = 15;
pub const SO_PASSCRED: u32 = 16;
pub const SO_PEERCRED: u32 = 17;
pub const SO_RCVLOWAT: u32 = 18;
pub const SO_SNDLOWAT: u32 = 19;
pub const SO_RCVTIMEO_OLD: u32 = 20;
pub const SO_SNDTIMEO_OLD: u32 = 21;
pub const SO_SECURITY_AUTHENTICATION: u32 = 22;
pub const SO_SECURITY_ENCRYPTION_TRANSPORT: u32 = 23;
pub const SO_SECURITY_ENCRYPTION_NETWORK: u32 = 24;
pub const SO_BINDTODEVICE: u32 = 25;
pub const SO_ATTACH_FILTER: u32 = 26;
pub const SO_DETACH_FILTER: u32 = 27;
pub const SO_GET_FILTER: u32 = 26;
pub const SO_PEERNAME: u32 = 28;
pub const SO_ACCEPTCONN: u32 = 30;
pub const SO_PEERSEC: u32 = 31;
pub const SO_PASSSEC: u32 = 34;
pub const SO_MARK: u32 = 36;
pub const SO_PROTOCOL: u32 = 38;
pub const SO_DOMAIN: u32 = 39;
pub const SO_RXQ_OVFL: u32 = 40;
pub const SO_WIFI_STATUS: u32 = 41;
pub const SCM_WIFI_STATUS: u32 = 41;
pub const SO_PEEK_OFF: u32 = 42;
pub const SO_NOFCS: u32 = 43;
pub const SO_LOCK_FILTER: u32 = 44;
pub const SO_SELECT_ERR_QUEUE: u32 = 45;
pub const SO_BUSY_POLL: u32 = 46;
pub const SO_MAX_PACING_RATE: u32 = 47;
pub const SO_BPF_EXTENSIONS: u32 = 48;
pub const SO_INCOMING_CPU: u32 = 49;
pub const SO_ATTACH_BPF: u32 = 50;
pub const SO_DETACH_BPF: u32 = 27;
pub const SO_ATTACH_REUSEPORT_CBPF: u32 = 51;
pub const SO_ATTACH_REUSEPORT_EBPF: u32 = 52;
pub const SO_CNX_ADVICE: u32 = 53;
pub const SCM_TIMESTAMPING_OPT_STATS: u32 = 54;
pub const SO_MEMINFO: u32 = 55;
pub const SO_INCOMING_NAPI_ID: u32 = 56;
pub const SO_COOKIE: u32 = 57;
pub const SCM_TIMESTAMPING_PKTINFO: u32 = 58;
pub const SO_PEERGROUPS: u32 = 59;
pub const SO_ZEROCOPY: u32 = 60;
pub const SO_TXTIME: u32 = 61;
pub const SCM_TXTIME: u32 = 61;
pub const SO_BINDTOIFINDEX: u32 = 62;
pub const SO_TIMESTAMP_OLD: u32 = 29;
pub const SO_TIMESTAMPNS_OLD: u32 = 35;
pub const SO_TIMESTAMPING_OLD: u32 = 37;
pub const SO_TIMESTAMP_NEW: u32 = 63;
pub const SO_TIMESTAMPNS_NEW: u32 = 64;
pub const SO_TIMESTAMPING_NEW: u32 = 65;
pub const SO_RCVTIMEO_NEW: u32 = 66;
pub const SO_SNDTIMEO_NEW: u32 = 67;
pub const SO_DETACH_REUSEPORT_BPF: u32 = 68;
pub const SO_PREFER_BUSY_POLL: u32 = 69;
pub const SO_BUSY_POLL_BUDGET: u32 = 70;
pub const SO_NETNS_COOKIE: u32 = 71;
pub const SO_BUF_LOCK: u32 = 72;
pub const SO_RESERVE_MEM: u32 = 73;
pub const SO_TXREHASH: u32 = 74;
pub const SO_RCVMARK: u32 = 75;
pub const SO_PASSPIDFD: u32 = 76;
pub const SO_PEERPIDFD: u32 = 77;
pub const SO_TIMESTAMP: u32 = 29;
pub const SO_TIMESTAMPNS: u32 = 35;
pub const SO_TIMESTAMPING: u32 = 37;
pub const SO_RCVTIMEO: u32 = 20;
pub const SO_SNDTIMEO: u32 = 21;
pub const SCM_TIMESTAMP: u32 = 29;
pub const SCM_TIMESTAMPNS: u32 = 35;
pub const SCM_TIMESTAMPING: u32 = 37;
pub const __osockaddr_defined: u32 = 1;
pub const __USE_KERNEL_IPV6_DEFS: u32 = 0;
pub const IP_OPTIONS: u32 = 4;
pub const IP_HDRINCL: u32 = 3;
pub const IP_TOS: u32 = 1;
pub const IP_TTL: u32 = 2;
pub const IP_RECVOPTS: u32 = 6;
pub const IP_RETOPTS: u32 = 7;
pub const IP_MULTICAST_IF: u32 = 32;
pub const IP_MULTICAST_TTL: u32 = 33;
pub const IP_MULTICAST_LOOP: u32 = 34;
pub const IP_ADD_MEMBERSHIP: u32 = 35;
pub const IP_DROP_MEMBERSHIP: u32 = 36;
pub const IP_UNBLOCK_SOURCE: u32 = 37;
pub const IP_BLOCK_SOURCE: u32 = 38;
pub const IP_ADD_SOURCE_MEMBERSHIP: u32 = 39;
pub const IP_DROP_SOURCE_MEMBERSHIP: u32 = 40;
pub const IP_MSFILTER: u32 = 41;
pub const MCAST_JOIN_GROUP: u32 = 42;
pub const MCAST_BLOCK_SOURCE: u32 = 43;
pub const MCAST_UNBLOCK_SOURCE: u32 = 44;
pub const MCAST_LEAVE_GROUP: u32 = 45;
pub const MCAST_JOIN_SOURCE_GROUP: u32 = 46;
pub const MCAST_LEAVE_SOURCE_GROUP: u32 = 47;
pub const MCAST_MSFILTER: u32 = 48;
pub const IP_MULTICAST_ALL: u32 = 49;
pub const IP_UNICAST_IF: u32 = 50;
pub const MCAST_EXCLUDE: u32 = 0;
pub const MCAST_INCLUDE: u32 = 1;
pub const IP_ROUTER_ALERT: u32 = 5;
pub const IP_PKTINFO: u32 = 8;
pub const IP_PKTOPTIONS: u32 = 9;
pub const IP_PMTUDISC: u32 = 10;
pub const IP_MTU_DISCOVER: u32 = 10;
pub const IP_RECVERR: u32 = 11;
pub const IP_RECVTTL: u32 = 12;
pub const IP_RECVTOS: u32 = 13;
pub const IP_MTU: u32 = 14;
pub const IP_FREEBIND: u32 = 15;
pub const IP_IPSEC_POLICY: u32 = 16;
pub const IP_XFRM_POLICY: u32 = 17;
pub const IP_PASSSEC: u32 = 18;
pub const IP_TRANSPARENT: u32 = 19;
pub const IP_ORIGDSTADDR: u32 = 20;
pub const IP_RECVORIGDSTADDR: u32 = 20;
pub const IP_MINTTL: u32 = 21;
pub const IP_NODEFRAG: u32 = 22;
pub const IP_CHECKSUM: u32 = 23;
pub const IP_BIND_ADDRESS_NO_PORT: u32 = 24;
pub const IP_RECVFRAGSIZE: u32 = 25;
pub const IP_RECVERR_RFC4884: u32 = 26;
pub const IP_PMTUDISC_DONT: u32 = 0;
pub const IP_PMTUDISC_WANT: u32 = 1;
pub const IP_PMTUDISC_DO: u32 = 2;
pub const IP_PMTUDISC_PROBE: u32 = 3;
pub const IP_PMTUDISC_INTERFACE: u32 = 4;
pub const IP_PMTUDISC_OMIT: u32 = 5;
pub const IP_LOCAL_PORT_RANGE: u32 = 51;
pub const IP_PROTOCOL: u32 = 52;
pub const SOL_IP: u32 = 0;
pub const IP_DEFAULT_MULTICAST_TTL: u32 = 1;
pub const IP_DEFAULT_MULTICAST_LOOP: u32 = 1;
pub const IP_MAX_MEMBERSHIPS: u32 = 20;
pub const IPV6_ADDRFORM: u32 = 1;
pub const IPV6_2292PKTINFO: u32 = 2;
pub const IPV6_2292HOPOPTS: u32 = 3;
pub const IPV6_2292DSTOPTS: u32 = 4;
pub const IPV6_2292RTHDR: u32 = 5;
pub const IPV6_2292PKTOPTIONS: u32 = 6;
pub const IPV6_CHECKSUM: u32 = 7;
pub const IPV6_2292HOPLIMIT: u32 = 8;
pub const IPV6_NEXTHOP: u32 = 9;
pub const IPV6_AUTHHDR: u32 = 10;
pub const IPV6_UNICAST_HOPS: u32 = 16;
pub const IPV6_MULTICAST_IF: u32 = 17;
pub const IPV6_MULTICAST_HOPS: u32 = 18;
pub const IPV6_MULTICAST_LOOP: u32 = 19;
pub const IPV6_JOIN_GROUP: u32 = 20;
pub const IPV6_LEAVE_GROUP: u32 = 21;
pub const IPV6_ROUTER_ALERT: u32 = 22;
pub const IPV6_MTU_DISCOVER: u32 = 23;
pub const IPV6_MTU: u32 = 24;
pub const IPV6_RECVERR: u32 = 25;
pub const IPV6_V6ONLY: u32 = 26;
pub const IPV6_JOIN_ANYCAST: u32 = 27;
pub const IPV6_LEAVE_ANYCAST: u32 = 28;
pub const IPV6_MULTICAST_ALL: u32 = 29;
pub const IPV6_ROUTER_ALERT_ISOLATE: u32 = 30;
pub const IPV6_RECVERR_RFC4884: u32 = 31;
pub const IPV6_IPSEC_POLICY: u32 = 34;
pub const IPV6_XFRM_POLICY: u32 = 35;
pub const IPV6_HDRINCL: u32 = 36;
pub const IPV6_RECVPKTINFO: u32 = 49;
pub const IPV6_PKTINFO: u32 = 50;
pub const IPV6_RECVHOPLIMIT: u32 = 51;
pub const IPV6_HOPLIMIT: u32 = 52;
pub const IPV6_RECVHOPOPTS: u32 = 53;
pub const IPV6_HOPOPTS: u32 = 54;
pub const IPV6_RTHDRDSTOPTS: u32 = 55;
pub const IPV6_RECVRTHDR: u32 = 56;
pub const IPV6_RTHDR: u32 = 57;
pub const IPV6_RECVDSTOPTS: u32 = 58;
pub const IPV6_DSTOPTS: u32 = 59;
pub const IPV6_RECVPATHMTU: u32 = 60;
pub const IPV6_PATHMTU: u32 = 61;
pub const IPV6_DONTFRAG: u32 = 62;
pub const IPV6_RECVTCLASS: u32 = 66;
pub const IPV6_TCLASS: u32 = 67;
pub const IPV6_AUTOFLOWLABEL: u32 = 70;
pub const IPV6_ADDR_PREFERENCES: u32 = 72;
pub const IPV6_MINHOPCOUNT: u32 = 73;
pub const IPV6_ORIGDSTADDR: u32 = 74;
pub const IPV6_RECVORIGDSTADDR: u32 = 74;
pub const IPV6_TRANSPARENT: u32 = 75;
pub const IPV6_UNICAST_IF: u32 = 76;
pub const IPV6_RECVFRAGSIZE: u32 = 77;
pub const IPV6_FREEBIND: u32 = 78;
pub const IPV6_ADD_MEMBERSHIP: u32 = 20;
pub const IPV6_DROP_MEMBERSHIP: u32 = 21;
pub const IPV6_RXHOPOPTS: u32 = 54;
pub const IPV6_RXDSTOPTS: u32 = 59;
pub const IPV6_PMTUDISC_DONT: u32 = 0;
pub const IPV6_PMTUDISC_WANT: u32 = 1;
pub const IPV6_PMTUDISC_DO: u32 = 2;
pub const IPV6_PMTUDISC_PROBE: u32 = 3;
pub const IPV6_PMTUDISC_INTERFACE: u32 = 4;
pub const IPV6_PMTUDISC_OMIT: u32 = 5;
pub const SOL_IPV6: u32 = 41;
pub const SOL_ICMPV6: u32 = 58;
pub const IPV6_RTHDR_LOOSE: u32 = 0;
pub const IPV6_RTHDR_STRICT: u32 = 1;
pub const IPV6_RTHDR_TYPE_0: u32 = 0;
pub const IN_CLASSA_NET: u32 = 4278190080;
pub const IN_CLASSA_NSHIFT: u32 = 24;
pub const IN_CLASSA_HOST: u32 = 16777215;
pub const IN_CLASSA_MAX: u32 = 128;
pub const IN_CLASSB_NET: u32 = 4294901760;
pub const IN_CLASSB_NSHIFT: u32 = 16;
pub const IN_CLASSB_HOST: u32 = 65535;
pub const IN_CLASSB_MAX: u32 = 65536;
pub const IN_CLASSC_NET: u32 = 4294967040;
pub const IN_CLASSC_NSHIFT: u32 = 8;
pub const IN_CLASSC_HOST: u32 = 255;
pub const IN_LOOPBACKNET: u32 = 127;
pub const INET_ADDRSTRLEN: u32 = 16;
pub const INET6_ADDRSTRLEN: u32 = 46;
pub const _STDIO_H: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C23: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C23: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const __cookie_io_functions_t_defined: u32 = 1;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &[u8; 5] = b"/tmp\0";
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _ALLOCA_H: u32 = 1;
pub const _STRING_H: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const _STRINGS_H: u32 = 1;
pub const _SYS_STAT_H: u32 = 1;
pub const _BITS_STAT_H: u32 = 1;
pub const _BITS_STRUCT_STAT_H: u32 = 1;
pub const __S_IFMT: u32 = 61440;
pub const __S_IFDIR: u32 = 16384;
pub const __S_IFCHR: u32 = 8192;
pub const __S_IFBLK: u32 = 24576;
pub const __S_IFREG: u32 = 32768;
pub const __S_IFIFO: u32 = 4096;
pub const __S_IFLNK: u32 = 40960;
pub const __S_IFSOCK: u32 = 49152;
pub const __S_ISUID: u32 = 2048;
pub const __S_ISGID: u32 = 1024;
pub const __S_ISVTX: u32 = 512;
pub const __S_IREAD: u32 = 256;
pub const __S_IWRITE: u32 = 128;
pub const __S_IEXEC: u32 = 64;
pub const UTIME_NOW: u32 = 1073741823;
pub const UTIME_OMIT: u32 = 1073741822;
pub const S_IFMT: u32 = 61440;
pub const S_IFDIR: u32 = 16384;
pub const S_IFCHR: u32 = 8192;
pub const S_IFBLK: u32 = 24576;
pub const S_IFREG: u32 = 32768;
pub const S_IFIFO: u32 = 4096;
pub const S_IFLNK: u32 = 40960;
pub const S_IFSOCK: u32 = 49152;
pub const S_ISUID: u32 = 2048;
pub const S_ISGID: u32 = 1024;
pub const S_ISVTX: u32 = 512;
pub const S_IRUSR: u32 = 256;
pub const S_IWUSR: u32 = 128;
pub const S_IXUSR: u32 = 64;
pub const S_IRWXU: u32 = 448;
pub const S_IREAD: u32 = 256;
pub const S_IWRITE: u32 = 128;
pub const S_IEXEC: u32 = 64;
pub const S_IRGRP: u32 = 32;
pub const S_IWGRP: u32 = 16;
pub const S_IXGRP: u32 = 8;
pub const S_IRWXG: u32 = 56;
pub const S_IROTH: u32 = 4;
pub const S_IWOTH: u32 = 2;
pub const S_IXOTH: u32 = 1;
pub const S_IRWXO: u32 = 7;
pub const ACCESSPERMS: u32 = 511;
pub const ALLPERMS: u32 = 4095;
pub const DEFFILEMODE: u32 = 438;
pub const S_BLKSIZE: u32 = 512;
pub const SEGMENT_RECORD_LENGTH: u32 = 3;
pub const LARGE_SEGMENT_RECORD_LENGTH: u32 = 4;
pub const STANDARD_RECORD_LENGTH: u32 = 3;
pub const ORG_RECORD_LENGTH: u32 = 4;
pub const MAX_RECORD_LENGTH: u32 = 4;
pub const NUM_DB_TYPES: u32 = 39;
pub type __u_char = ::std::ffi::c_uchar;
pub type __u_short = ::std::ffi::c_ushort;
pub type __u_int = ::std::ffi::c_uint;
pub type __u_long = ::std::ffi::c_ulong;
pub type __int8_t = ::std::ffi::c_schar;
pub type __uint8_t = ::std::ffi::c_uchar;
pub type __int16_t = ::std::ffi::c_short;
pub type __uint16_t = ::std::ffi::c_ushort;
pub type __int32_t = ::std::ffi::c_int;
pub type __uint32_t = ::std::ffi::c_uint;
pub type __int64_t = ::std::ffi::c_long;
pub type __uint64_t = ::std::ffi::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::ffi::c_long;
pub type __u_quad_t = ::std::ffi::c_ulong;
pub type __intmax_t = ::std::ffi::c_long;
pub type __uintmax_t = ::std::ffi::c_ulong;
pub type __dev_t = ::std::ffi::c_ulong;
pub type __uid_t = ::std::ffi::c_uint;
pub type __gid_t = ::std::ffi::c_uint;
pub type __ino_t = ::std::ffi::c_ulong;
pub type __ino64_t = ::std::ffi::c_ulong;
pub type __mode_t = ::std::ffi::c_uint;
pub type __nlink_t = ::std::ffi::c_ulong;
pub type __off_t = ::std::ffi::c_long;
pub type __off64_t = ::std::ffi::c_long;
pub type __pid_t = ::std::ffi::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::ffi::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __fsid_t"][::std::mem::size_of::<__fsid_t>() - 8usize];
    ["Alignment of __fsid_t"][::std::mem::align_of::<__fsid_t>() - 4usize];
    ["Offset of field: __fsid_t::__val"][::std::mem::offset_of!(__fsid_t, __val) - 0usize];
};
pub type __clock_t = ::std::ffi::c_long;
pub type __rlim_t = ::std::ffi::c_ulong;
pub type __rlim64_t = ::std::ffi::c_ulong;
pub type __id_t = ::std::ffi::c_uint;
pub type __time_t = ::std::ffi::c_long;
pub type __useconds_t = ::std::ffi::c_uint;
pub type __suseconds_t = ::std::ffi::c_long;
pub type __suseconds64_t = ::std::ffi::c_long;
pub type __daddr_t = ::std::ffi::c_int;
pub type __key_t = ::std::ffi::c_int;
pub type __clockid_t = ::std::ffi::c_int;
pub type __timer_t = *mut ::std::ffi::c_void;
pub type __blksize_t = ::std::ffi::c_long;
pub type __blkcnt_t = ::std::ffi::c_long;
pub type __blkcnt64_t = ::std::ffi::c_long;
pub type __fsblkcnt_t = ::std::ffi::c_ulong;
pub type __fsblkcnt64_t = ::std::ffi::c_ulong;
pub type __fsfilcnt_t = ::std::ffi::c_ulong;
pub type __fsfilcnt64_t = ::std::ffi::c_ulong;
pub type __fsword_t = ::std::ffi::c_long;
pub type __ssize_t = ::std::ffi::c_long;
pub type __syscall_slong_t = ::std::ffi::c_long;
pub type __syscall_ulong_t = ::std::ffi::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::ffi::c_char;
pub type __intptr_t = ::std::ffi::c_long;
pub type __socklen_t = ::std::ffi::c_uint;
pub type __sig_atomic_t = ::std::ffi::c_int;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::ffi::c_ulong;
pub type ushort = ::std::ffi::c_ushort;
pub type uint = ::std::ffi::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::ffi::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::ffi::c_ulong; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sigset_t"][::std::mem::size_of::<__sigset_t>() - 128usize];
    ["Alignment of __sigset_t"][::std::mem::align_of::<__sigset_t>() - 8usize];
    ["Offset of field: __sigset_t::__val"][::std::mem::offset_of!(__sigset_t, __val) - 0usize];
};
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timeval"][::std::mem::size_of::<timeval>() - 16usize];
    ["Alignment of timeval"][::std::mem::align_of::<timeval>() - 8usize];
    ["Offset of field: timeval::tv_sec"][::std::mem::offset_of!(timeval, tv_sec) - 0usize];
    ["Offset of field: timeval::tv_usec"][::std::mem::offset_of!(timeval, tv_usec) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timespec"][::std::mem::size_of::<timespec>() - 16usize];
    ["Alignment of timespec"][::std::mem::align_of::<timespec>() - 8usize];
    ["Offset of field: timespec::tv_sec"][::std::mem::offset_of!(timespec, tv_sec) - 0usize];
    ["Offset of field: timespec::tv_nsec"][::std::mem::offset_of!(timespec, tv_nsec) - 8usize];
};
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::ffi::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fd_set"][::std::mem::size_of::<fd_set>() - 128usize];
    ["Alignment of fd_set"][::std::mem::align_of::<fd_set>() - 8usize];
    ["Offset of field: fd_set::__fds_bits"][::std::mem::offset_of!(fd_set, __fds_bits) - 0usize];
};
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::ffi::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::ffi::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::ffi::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __atomic_wide_counter {
    pub __value64: ::std::ffi::c_ulonglong,
    pub __value32: __atomic_wide_counter__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __atomic_wide_counter__bindgen_ty_1 {
    pub __low: ::std::ffi::c_uint,
    pub __high: ::std::ffi::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __atomic_wide_counter__bindgen_ty_1"]
        [::std::mem::size_of::<__atomic_wide_counter__bindgen_ty_1>() - 8usize];
    ["Alignment of __atomic_wide_counter__bindgen_ty_1"]
        [::std::mem::align_of::<__atomic_wide_counter__bindgen_ty_1>() - 4usize];
    ["Offset of field: __atomic_wide_counter__bindgen_ty_1::__low"]
        [::std::mem::offset_of!(__atomic_wide_counter__bindgen_ty_1, __low) - 0usize];
    ["Offset of field: __atomic_wide_counter__bindgen_ty_1::__high"]
        [::std::mem::offset_of!(__atomic_wide_counter__bindgen_ty_1, __high) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __atomic_wide_counter"][::std::mem::size_of::<__atomic_wide_counter>() - 8usize];
    ["Alignment of __atomic_wide_counter"]
        [::std::mem::align_of::<__atomic_wide_counter>() - 8usize];
    ["Offset of field: __atomic_wide_counter::__value64"]
        [::std::mem::offset_of!(__atomic_wide_counter, __value64) - 0usize];
    ["Offset of field: __atomic_wide_counter::__value32"]
        [::std::mem::offset_of!(__atomic_wide_counter, __value32) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_internal_list"][::std::mem::size_of::<__pthread_internal_list>() - 16usize];
    ["Alignment of __pthread_internal_list"]
        [::std::mem::align_of::<__pthread_internal_list>() - 8usize];
    ["Offset of field: __pthread_internal_list::__prev"]
        [::std::mem::offset_of!(__pthread_internal_list, __prev) - 0usize];
    ["Offset of field: __pthread_internal_list::__next"]
        [::std::mem::offset_of!(__pthread_internal_list, __next) - 8usize];
};
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_internal_slist"]
        [::std::mem::size_of::<__pthread_internal_slist>() - 8usize];
    ["Alignment of __pthread_internal_slist"]
        [::std::mem::align_of::<__pthread_internal_slist>() - 8usize];
    ["Offset of field: __pthread_internal_slist::__next"]
        [::std::mem::offset_of!(__pthread_internal_slist, __next) - 0usize];
};
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::ffi::c_int,
    pub __count: ::std::ffi::c_uint,
    pub __owner: ::std::ffi::c_int,
    pub __nusers: ::std::ffi::c_uint,
    pub __kind: ::std::ffi::c_int,
    pub __spins: ::std::ffi::c_short,
    pub __elision: ::std::ffi::c_short,
    pub __list: __pthread_list_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_mutex_s"][::std::mem::size_of::<__pthread_mutex_s>() - 40usize];
    ["Alignment of __pthread_mutex_s"][::std::mem::align_of::<__pthread_mutex_s>() - 8usize];
    ["Offset of field: __pthread_mutex_s::__lock"]
        [::std::mem::offset_of!(__pthread_mutex_s, __lock) - 0usize];
    ["Offset of field: __pthread_mutex_s::__count"]
        [::std::mem::offset_of!(__pthread_mutex_s, __count) - 4usize];
    ["Offset of field: __pthread_mutex_s::__owner"]
        [::std::mem::offset_of!(__pthread_mutex_s, __owner) - 8usize];
    ["Offset of field: __pthread_mutex_s::__nusers"]
        [::std::mem::offset_of!(__pthread_mutex_s, __nusers) - 12usize];
    ["Offset of field: __pthread_mutex_s::__kind"]
        [::std::mem::offset_of!(__pthread_mutex_s, __kind) - 16usize];
    ["Offset of field: __pthread_mutex_s::__spins"]
        [::std::mem::offset_of!(__pthread_mutex_s, __spins) - 20usize];
    ["Offset of field: __pthread_mutex_s::__elision"]
        [::std::mem::offset_of!(__pthread_mutex_s, __elision) - 22usize];
    ["Offset of field: __pthread_mutex_s::__list"]
        [::std::mem::offset_of!(__pthread_mutex_s, __list) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::ffi::c_uint,
    pub __writers: ::std::ffi::c_uint,
    pub __wrphase_futex: ::std::ffi::c_uint,
    pub __writers_futex: ::std::ffi::c_uint,
    pub __pad3: ::std::ffi::c_uint,
    pub __pad4: ::std::ffi::c_uint,
    pub __cur_writer: ::std::ffi::c_int,
    pub __shared: ::std::ffi::c_int,
    pub __rwelision: ::std::ffi::c_schar,
    pub __pad1: [::std::ffi::c_uchar; 7usize],
    pub __pad2: ::std::ffi::c_ulong,
    pub __flags: ::std::ffi::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_rwlock_arch_t"][::std::mem::size_of::<__pthread_rwlock_arch_t>() - 56usize];
    ["Alignment of __pthread_rwlock_arch_t"]
        [::std::mem::align_of::<__pthread_rwlock_arch_t>() - 8usize];
    ["Offset of field: __pthread_rwlock_arch_t::__readers"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __readers) - 0usize];
    ["Offset of field: __pthread_rwlock_arch_t::__writers"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __writers) - 4usize];
    ["Offset of field: __pthread_rwlock_arch_t::__wrphase_futex"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __wrphase_futex) - 8usize];
    ["Offset of field: __pthread_rwlock_arch_t::__writers_futex"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __writers_futex) - 12usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad3"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad3) - 16usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad4"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad4) - 20usize];
    ["Offset of field: __pthread_rwlock_arch_t::__cur_writer"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __cur_writer) - 24usize];
    ["Offset of field: __pthread_rwlock_arch_t::__shared"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __shared) - 28usize];
    ["Offset of field: __pthread_rwlock_arch_t::__rwelision"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __rwelision) - 32usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad1"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad1) - 33usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad2"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad2) - 40usize];
    ["Offset of field: __pthread_rwlock_arch_t::__flags"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __flags) - 48usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __wseq: __atomic_wide_counter,
    pub __g1_start: __atomic_wide_counter,
    pub __g_refs: [::std::ffi::c_uint; 2usize],
    pub __g_size: [::std::ffi::c_uint; 2usize],
    pub __g1_orig_size: ::std::ffi::c_uint,
    pub __wrefs: ::std::ffi::c_uint,
    pub __g_signals: [::std::ffi::c_uint; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_cond_s"][::std::mem::size_of::<__pthread_cond_s>() - 48usize];
    ["Alignment of __pthread_cond_s"][::std::mem::align_of::<__pthread_cond_s>() - 8usize];
    ["Offset of field: __pthread_cond_s::__wseq"]
        [::std::mem::offset_of!(__pthread_cond_s, __wseq) - 0usize];
    ["Offset of field: __pthread_cond_s::__g1_start"]
        [::std::mem::offset_of!(__pthread_cond_s, __g1_start) - 8usize];
    ["Offset of field: __pthread_cond_s::__g_refs"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_refs) - 16usize];
    ["Offset of field: __pthread_cond_s::__g_size"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_size) - 24usize];
    ["Offset of field: __pthread_cond_s::__g1_orig_size"]
        [::std::mem::offset_of!(__pthread_cond_s, __g1_orig_size) - 32usize];
    ["Offset of field: __pthread_cond_s::__wrefs"]
        [::std::mem::offset_of!(__pthread_cond_s, __wrefs) - 36usize];
    ["Offset of field: __pthread_cond_s::__g_signals"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_signals) - 40usize];
};
pub type __tss_t = ::std::ffi::c_uint;
pub type __thrd_t = ::std::ffi::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __once_flag {
    pub __data: ::std::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __once_flag"][::std::mem::size_of::<__once_flag>() - 4usize];
    ["Alignment of __once_flag"][::std::mem::align_of::<__once_flag>() - 4usize];
    ["Offset of field: __once_flag::__data"][::std::mem::offset_of!(__once_flag, __data) - 0usize];
};
pub type pthread_t = ::std::ffi::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::ffi::c_char; 4usize],
    pub __align: ::std::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_mutexattr_t"][::std::mem::size_of::<pthread_mutexattr_t>() - 4usize];
    ["Alignment of pthread_mutexattr_t"][::std::mem::align_of::<pthread_mutexattr_t>() - 4usize];
    ["Offset of field: pthread_mutexattr_t::__size"]
        [::std::mem::offset_of!(pthread_mutexattr_t, __size) - 0usize];
    ["Offset of field: pthread_mutexattr_t::__align"]
        [::std::mem::offset_of!(pthread_mutexattr_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::ffi::c_char; 4usize],
    pub __align: ::std::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_condattr_t"][::std::mem::size_of::<pthread_condattr_t>() - 4usize];
    ["Alignment of pthread_condattr_t"][::std::mem::align_of::<pthread_condattr_t>() - 4usize];
    ["Offset of field: pthread_condattr_t::__size"]
        [::std::mem::offset_of!(pthread_condattr_t, __size) - 0usize];
    ["Offset of field: pthread_condattr_t::__align"]
        [::std::mem::offset_of!(pthread_condattr_t, __align) - 0usize];
};
pub type pthread_key_t = ::std::ffi::c_uint;
pub type pthread_once_t = ::std::ffi::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::ffi::c_char; 56usize],
    pub __align: ::std::ffi::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_attr_t"][::std::mem::size_of::<pthread_attr_t>() - 56usize];
    ["Alignment of pthread_attr_t"][::std::mem::align_of::<pthread_attr_t>() - 8usize];
    ["Offset of field: pthread_attr_t::__size"]
        [::std::mem::offset_of!(pthread_attr_t, __size) - 0usize];
    ["Offset of field: pthread_attr_t::__align"]
        [::std::mem::offset_of!(pthread_attr_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::ffi::c_char; 40usize],
    pub __align: ::std::ffi::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_mutex_t"][::std::mem::size_of::<pthread_mutex_t>() - 40usize];
    ["Alignment of pthread_mutex_t"][::std::mem::align_of::<pthread_mutex_t>() - 8usize];
    ["Offset of field: pthread_mutex_t::__data"]
        [::std::mem::offset_of!(pthread_mutex_t, __data) - 0usize];
    ["Offset of field: pthread_mutex_t::__size"]
        [::std::mem::offset_of!(pthread_mutex_t, __size) - 0usize];
    ["Offset of field: pthread_mutex_t::__align"]
        [::std::mem::offset_of!(pthread_mutex_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::ffi::c_char; 48usize],
    pub __align: ::std::ffi::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_cond_t"][::std::mem::size_of::<pthread_cond_t>() - 48usize];
    ["Alignment of pthread_cond_t"][::std::mem::align_of::<pthread_cond_t>() - 8usize];
    ["Offset of field: pthread_cond_t::__data"]
        [::std::mem::offset_of!(pthread_cond_t, __data) - 0usize];
    ["Offset of field: pthread_cond_t::__size"]
        [::std::mem::offset_of!(pthread_cond_t, __size) - 0usize];
    ["Offset of field: pthread_cond_t::__align"]
        [::std::mem::offset_of!(pthread_cond_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::ffi::c_char; 56usize],
    pub __align: ::std::ffi::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_rwlock_t"][::std::mem::size_of::<pthread_rwlock_t>() - 56usize];
    ["Alignment of pthread_rwlock_t"][::std::mem::align_of::<pthread_rwlock_t>() - 8usize];
    ["Offset of field: pthread_rwlock_t::__data"]
        [::std::mem::offset_of!(pthread_rwlock_t, __data) - 0usize];
    ["Offset of field: pthread_rwlock_t::__size"]
        [::std::mem::offset_of!(pthread_rwlock_t, __size) - 0usize];
    ["Offset of field: pthread_rwlock_t::__align"]
        [::std::mem::offset_of!(pthread_rwlock_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::ffi::c_char; 8usize],
    pub __align: ::std::ffi::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_rwlockattr_t"][::std::mem::size_of::<pthread_rwlockattr_t>() - 8usize];
    ["Alignment of pthread_rwlockattr_t"][::std::mem::align_of::<pthread_rwlockattr_t>() - 8usize];
    ["Offset of field: pthread_rwlockattr_t::__size"]
        [::std::mem::offset_of!(pthread_rwlockattr_t, __size) - 0usize];
    ["Offset of field: pthread_rwlockattr_t::__align"]
        [::std::mem::offset_of!(pthread_rwlockattr_t, __align) - 0usize];
};
pub type pthread_spinlock_t = ::std::ffi::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::ffi::c_char; 32usize],
    pub __align: ::std::ffi::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_barrier_t"][::std::mem::size_of::<pthread_barrier_t>() - 32usize];
    ["Alignment of pthread_barrier_t"][::std::mem::align_of::<pthread_barrier_t>() - 8usize];
    ["Offset of field: pthread_barrier_t::__size"]
        [::std::mem::offset_of!(pthread_barrier_t, __size) - 0usize];
    ["Offset of field: pthread_barrier_t::__align"]
        [::std::mem::offset_of!(pthread_barrier_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::ffi::c_char; 4usize],
    pub __align: ::std::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_barrierattr_t"][::std::mem::size_of::<pthread_barrierattr_t>() - 4usize];
    ["Alignment of pthread_barrierattr_t"]
        [::std::mem::align_of::<pthread_barrierattr_t>() - 4usize];
    ["Offset of field: pthread_barrierattr_t::__size"]
        [::std::mem::offset_of!(pthread_barrierattr_t, __size) - 0usize];
    ["Offset of field: pthread_barrierattr_t::__align"]
        [::std::mem::offset_of!(pthread_barrierattr_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iovec {
    pub iov_base: *mut ::std::ffi::c_void,
    pub iov_len: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of iovec"][::std::mem::size_of::<iovec>() - 16usize];
    ["Alignment of iovec"][::std::mem::align_of::<iovec>() - 8usize];
    ["Offset of field: iovec::iov_base"][::std::mem::offset_of!(iovec, iov_base) - 0usize];
    ["Offset of field: iovec::iov_len"][::std::mem::offset_of!(iovec, iov_len) - 8usize];
};
pub type socklen_t = __socklen_t;
pub const __socket_type_SOCK_STREAM: __socket_type = 1;
pub const __socket_type_SOCK_DGRAM: __socket_type = 2;
pub const __socket_type_SOCK_RAW: __socket_type = 3;
pub const __socket_type_SOCK_RDM: __socket_type = 4;
pub const __socket_type_SOCK_SEQPACKET: __socket_type = 5;
pub const __socket_type_SOCK_DCCP: __socket_type = 6;
pub const __socket_type_SOCK_PACKET: __socket_type = 10;
pub const __socket_type_SOCK_CLOEXEC: __socket_type = 524288;
pub const __socket_type_SOCK_NONBLOCK: __socket_type = 2048;
pub type __socket_type = ::std::ffi::c_uint;
pub type sa_family_t = ::std::ffi::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr {
    pub sa_family: sa_family_t,
    pub sa_data: [::std::ffi::c_char; 14usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sockaddr"][::std::mem::size_of::<sockaddr>() - 16usize];
    ["Alignment of sockaddr"][::std::mem::align_of::<sockaddr>() - 2usize];
    ["Offset of field: sockaddr::sa_family"][::std::mem::offset_of!(sockaddr, sa_family) - 0usize];
    ["Offset of field: sockaddr::sa_data"][::std::mem::offset_of!(sockaddr, sa_data) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_storage {
    pub ss_family: sa_family_t,
    pub __ss_padding: [::std::ffi::c_char; 118usize],
    pub __ss_align: ::std::ffi::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sockaddr_storage"][::std::mem::size_of::<sockaddr_storage>() - 128usize];
    ["Alignment of sockaddr_storage"][::std::mem::align_of::<sockaddr_storage>() - 8usize];
    ["Offset of field: sockaddr_storage::ss_family"]
        [::std::mem::offset_of!(sockaddr_storage, ss_family) - 0usize];
    ["Offset of field: sockaddr_storage::__ss_padding"]
        [::std::mem::offset_of!(sockaddr_storage, __ss_padding) - 2usize];
    ["Offset of field: sockaddr_storage::__ss_align"]
        [::std::mem::offset_of!(sockaddr_storage, __ss_align) - 120usize];
};
pub const MSG_OOB: _bindgen_ty_1 = 1;
pub const MSG_PEEK: _bindgen_ty_1 = 2;
pub const MSG_DONTROUTE: _bindgen_ty_1 = 4;
pub const MSG_CTRUNC: _bindgen_ty_1 = 8;
pub const MSG_PROXY: _bindgen_ty_1 = 16;
pub const MSG_TRUNC: _bindgen_ty_1 = 32;
pub const MSG_DONTWAIT: _bindgen_ty_1 = 64;
pub const MSG_EOR: _bindgen_ty_1 = 128;
pub const MSG_WAITALL: _bindgen_ty_1 = 256;
pub const MSG_FIN: _bindgen_ty_1 = 512;
pub const MSG_SYN: _bindgen_ty_1 = 1024;
pub const MSG_CONFIRM: _bindgen_ty_1 = 2048;
pub const MSG_RST: _bindgen_ty_1 = 4096;
pub const MSG_ERRQUEUE: _bindgen_ty_1 = 8192;
pub const MSG_NOSIGNAL: _bindgen_ty_1 = 16384;
pub const MSG_MORE: _bindgen_ty_1 = 32768;
pub const MSG_WAITFORONE: _bindgen_ty_1 = 65536;
pub const MSG_BATCH: _bindgen_ty_1 = 262144;
pub const MSG_ZEROCOPY: _bindgen_ty_1 = 67108864;
pub const MSG_FASTOPEN: _bindgen_ty_1 = 536870912;
pub const MSG_CMSG_CLOEXEC: _bindgen_ty_1 = 1073741824;
pub type _bindgen_ty_1 = ::std::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msghdr {
    pub msg_name: *mut ::std::ffi::c_void,
    pub msg_namelen: socklen_t,
    pub msg_iov: *mut iovec,
    pub msg_iovlen: usize,
    pub msg_control: *mut ::std::ffi::c_void,
    pub msg_controllen: usize,
    pub msg_flags: ::std::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of msghdr"][::std::mem::size_of::<msghdr>() - 56usize];
    ["Alignment of msghdr"][::std::mem::align_of::<msghdr>() - 8usize];
    ["Offset of field: msghdr::msg_name"][::std::mem::offset_of!(msghdr, msg_name) - 0usize];
    ["Offset of field: msghdr::msg_namelen"][::std::mem::offset_of!(msghdr, msg_namelen) - 8usize];
    ["Offset of field: msghdr::msg_iov"][::std::mem::offset_of!(msghdr, msg_iov) - 16usize];
    ["Offset of field: msghdr::msg_iovlen"][::std::mem::offset_of!(msghdr, msg_iovlen) - 24usize];
    ["Offset of field: msghdr::msg_control"][::std::mem::offset_of!(msghdr, msg_control) - 32usize];
    ["Offset of field: msghdr::msg_controllen"]
        [::std::mem::offset_of!(msghdr, msg_controllen) - 40usize];
    ["Offset of field: msghdr::msg_flags"][::std::mem::offset_of!(msghdr, msg_flags) - 48usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct cmsghdr {
    pub cmsg_len: usize,
    pub cmsg_level: ::std::ffi::c_int,
    pub cmsg_type: ::std::ffi::c_int,
    pub __cmsg_data: __IncompleteArrayField<::std::ffi::c_uchar>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cmsghdr"][::std::mem::size_of::<cmsghdr>() - 16usize];
    ["Alignment of cmsghdr"][::std::mem::align_of::<cmsghdr>() - 8usize];
    ["Offset of field: cmsghdr::cmsg_len"][::std::mem::offset_of!(cmsghdr, cmsg_len) - 0usize];
    ["Offset of field: cmsghdr::cmsg_level"][::std::mem::offset_of!(cmsghdr, cmsg_level) - 8usize];
    ["Offset of field: cmsghdr::cmsg_type"][::std::mem::offset_of!(cmsghdr, cmsg_type) - 12usize];
    ["Offset of field: cmsghdr::__cmsg_data"]
        [::std::mem::offset_of!(cmsghdr, __cmsg_data) - 16usize];
};
extern "C" {
    pub fn __cmsg_nxthdr(__mhdr: *mut msghdr, __cmsg: *mut cmsghdr) -> *mut cmsghdr;
}
pub const SCM_RIGHTS: _bindgen_ty_2 = 1;
pub type _bindgen_ty_2 = ::std::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fd_set {
    pub fds_bits: [::std::ffi::c_ulong; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __kernel_fd_set"][::std::mem::size_of::<__kernel_fd_set>() - 128usize];
    ["Alignment of __kernel_fd_set"][::std::mem::align_of::<__kernel_fd_set>() - 8usize];
    ["Offset of field: __kernel_fd_set::fds_bits"]
        [::std::mem::offset_of!(__kernel_fd_set, fds_bits) - 0usize];
};
pub type __kernel_sighandler_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::ffi::c_int)>;
pub type __kernel_key_t = ::std::ffi::c_int;
pub type __kernel_mqd_t = ::std::ffi::c_int;
pub type __kernel_old_uid_t = ::std::ffi::c_ushort;
pub type __kernel_old_gid_t = ::std::ffi::c_ushort;
pub type __kernel_old_dev_t = ::std::ffi::c_ulong;
pub type __kernel_long_t = ::std::ffi::c_long;
pub type __kernel_ulong_t = ::std::ffi::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = ::std::ffi::c_uint;
pub type __kernel_pid_t = ::std::ffi::c_int;
pub type __kernel_ipc_pid_t = ::std::ffi::c_int;
pub type __kernel_uid_t = ::std::ffi::c_uint;
pub type __kernel_gid_t = ::std::ffi::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = ::std::ffi::c_int;
pub type __kernel_uid32_t = ::std::ffi::c_uint;
pub type __kernel_gid32_t = ::std::ffi::c_uint;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fsid_t {
    pub val: [::std::ffi::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __kernel_fsid_t"][::std::mem::size_of::<__kernel_fsid_t>() - 8usize];
    ["Alignment of __kernel_fsid_t"][::std::mem::align_of::<__kernel_fsid_t>() - 4usize];
    ["Offset of field: __kernel_fsid_t::val"]
        [::std::mem::offset_of!(__kernel_fsid_t, val) - 0usize];
};
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = ::std::ffi::c_longlong;
pub type __kernel_old_time_t = __kernel_long_t;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_time64_t = ::std::ffi::c_longlong;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = ::std::ffi::c_int;
pub type __kernel_clockid_t = ::std::ffi::c_int;
pub type __kernel_caddr_t = *mut ::std::ffi::c_char;
pub type __kernel_uid16_t = ::std::ffi::c_ushort;
pub type __kernel_gid16_t = ::std::ffi::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct linger {
    pub l_onoff: ::std::ffi::c_int,
    pub l_linger: ::std::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of linger"][::std::mem::size_of::<linger>() - 8usize];
    ["Alignment of linger"][::std::mem::align_of::<linger>() - 4usize];
    ["Offset of field: linger::l_onoff"][::std::mem::offset_of!(linger, l_onoff) - 0usize];
    ["Offset of field: linger::l_linger"][::std::mem::offset_of!(linger, l_linger) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct osockaddr {
    pub sa_family: ::std::ffi::c_ushort,
    pub sa_data: [::std::ffi::c_uchar; 14usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of osockaddr"][::std::mem::size_of::<osockaddr>() - 16usize];
    ["Alignment of osockaddr"][::std::mem::align_of::<osockaddr>() - 2usize];
    ["Offset of field: osockaddr::sa_family"]
        [::std::mem::offset_of!(osockaddr, sa_family) - 0usize];
    ["Offset of field: osockaddr::sa_data"][::std::mem::offset_of!(osockaddr, sa_data) - 2usize];
};
pub const SHUT_RD: _bindgen_ty_3 = 0;
pub const SHUT_WR: _bindgen_ty_3 = 1;
pub const SHUT_RDWR: _bindgen_ty_3 = 2;
pub type _bindgen_ty_3 = ::std::ffi::c_uint;
extern "C" {
    pub fn socket(
        __domain: ::std::ffi::c_int,
        __type: ::std::ffi::c_int,
        __protocol: ::std::ffi::c_int,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn socketpair(
        __domain: ::std::ffi::c_int,
        __type: ::std::ffi::c_int,
        __protocol: ::std::ffi::c_int,
        __fds: *mut ::std::ffi::c_int,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn bind(
        __fd: ::std::ffi::c_int,
        __addr: *const sockaddr,
        __len: socklen_t,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn getsockname(
        __fd: ::std::ffi::c_int,
        __addr: *mut sockaddr,
        __len: *mut socklen_t,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn connect(
        __fd: ::std::ffi::c_int,
        __addr: *const sockaddr,
        __len: socklen_t,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn getpeername(
        __fd: ::std::ffi::c_int,
        __addr: *mut sockaddr,
        __len: *mut socklen_t,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn send(
        __fd: ::std::ffi::c_int,
        __buf: *const ::std::ffi::c_void,
        __n: usize,
        __flags: ::std::ffi::c_int,
    ) -> isize;
}
extern "C" {
    pub fn recv(
        __fd: ::std::ffi::c_int,
        __buf: *mut ::std::ffi::c_void,
        __n: usize,
        __flags: ::std::ffi::c_int,
    ) -> isize;
}
extern "C" {
    pub fn sendto(
        __fd: ::std::ffi::c_int,
        __buf: *const ::std::ffi::c_void,
        __n: usize,
        __flags: ::std::ffi::c_int,
        __addr: *const sockaddr,
        __addr_len: socklen_t,
    ) -> isize;
}
extern "C" {
    pub fn recvfrom(
        __fd: ::std::ffi::c_int,
        __buf: *mut ::std::ffi::c_void,
        __n: usize,
        __flags: ::std::ffi::c_int,
        __addr: *mut sockaddr,
        __addr_len: *mut socklen_t,
    ) -> isize;
}
extern "C" {
    pub fn sendmsg(
        __fd: ::std::ffi::c_int,
        __message: *const msghdr,
        __flags: ::std::ffi::c_int,
    ) -> isize;
}
extern "C" {
    pub fn recvmsg(
        __fd: ::std::ffi::c_int,
        __message: *mut msghdr,
        __flags: ::std::ffi::c_int,
    ) -> isize;
}
extern "C" {
    pub fn getsockopt(
        __fd: ::std::ffi::c_int,
        __level: ::std::ffi::c_int,
        __optname: ::std::ffi::c_int,
        __optval: *mut ::std::ffi::c_void,
        __optlen: *mut socklen_t,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn setsockopt(
        __fd: ::std::ffi::c_int,
        __level: ::std::ffi::c_int,
        __optname: ::std::ffi::c_int,
        __optval: *const ::std::ffi::c_void,
        __optlen: socklen_t,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn listen(__fd: ::std::ffi::c_int, __n: ::std::ffi::c_int) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn accept(
        __fd: ::std::ffi::c_int,
        __addr: *mut sockaddr,
        __addr_len: *mut socklen_t,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn shutdown(__fd: ::std::ffi::c_int, __how: ::std::ffi::c_int) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn sockatmark(__fd: ::std::ffi::c_int) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn isfdtype(__fd: ::std::ffi::c_int, __fdtype: ::std::ffi::c_int) -> ::std::ffi::c_int;
}
pub type in_addr_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_addr {
    pub s_addr: in_addr_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of in_addr"][::std::mem::size_of::<in_addr>() - 4usize];
    ["Alignment of in_addr"][::std::mem::align_of::<in_addr>() - 4usize];
    ["Offset of field: in_addr::s_addr"][::std::mem::offset_of!(in_addr, s_addr) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_opts {
    pub ip_dst: in_addr,
    pub ip_opts: [::std::ffi::c_char; 40usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ip_opts"][::std::mem::size_of::<ip_opts>() - 44usize];
    ["Alignment of ip_opts"][::std::mem::align_of::<ip_opts>() - 4usize];
    ["Offset of field: ip_opts::ip_dst"][::std::mem::offset_of!(ip_opts, ip_dst) - 0usize];
    ["Offset of field: ip_opts::ip_opts"][::std::mem::offset_of!(ip_opts, ip_opts) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_pktinfo {
    pub ipi_ifindex: ::std::ffi::c_int,
    pub ipi_spec_dst: in_addr,
    pub ipi_addr: in_addr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of in_pktinfo"][::std::mem::size_of::<in_pktinfo>() - 12usize];
    ["Alignment of in_pktinfo"][::std::mem::align_of::<in_pktinfo>() - 4usize];
    ["Offset of field: in_pktinfo::ipi_ifindex"]
        [::std::mem::offset_of!(in_pktinfo, ipi_ifindex) - 0usize];
    ["Offset of field: in_pktinfo::ipi_spec_dst"]
        [::std::mem::offset_of!(in_pktinfo, ipi_spec_dst) - 4usize];
    ["Offset of field: in_pktinfo::ipi_addr"]
        [::std::mem::offset_of!(in_pktinfo, ipi_addr) - 8usize];
};
pub const IPPROTO_IP: _bindgen_ty_4 = 0;
pub const IPPROTO_ICMP: _bindgen_ty_4 = 1;
pub const IPPROTO_IGMP: _bindgen_ty_4 = 2;
pub const IPPROTO_IPIP: _bindgen_ty_4 = 4;
pub const IPPROTO_TCP: _bindgen_ty_4 = 6;
pub const IPPROTO_EGP: _bindgen_ty_4 = 8;
pub const IPPROTO_PUP: _bindgen_ty_4 = 12;
pub const IPPROTO_UDP: _bindgen_ty_4 = 17;
pub const IPPROTO_IDP: _bindgen_ty_4 = 22;
pub const IPPROTO_TP: _bindgen_ty_4 = 29;
pub const IPPROTO_DCCP: _bindgen_ty_4 = 33;
pub const IPPROTO_IPV6: _bindgen_ty_4 = 41;
pub const IPPROTO_RSVP: _bindgen_ty_4 = 46;
pub const IPPROTO_GRE: _bindgen_ty_4 = 47;
pub const IPPROTO_ESP: _bindgen_ty_4 = 50;
pub const IPPROTO_AH: _bindgen_ty_4 = 51;
pub const IPPROTO_MTP: _bindgen_ty_4 = 92;
pub const IPPROTO_BEETPH: _bindgen_ty_4 = 94;
pub const IPPROTO_ENCAP: _bindgen_ty_4 = 98;
pub const IPPROTO_PIM: _bindgen_ty_4 = 103;
pub const IPPROTO_COMP: _bindgen_ty_4 = 108;
pub const IPPROTO_L2TP: _bindgen_ty_4 = 115;
pub const IPPROTO_SCTP: _bindgen_ty_4 = 132;
pub const IPPROTO_UDPLITE: _bindgen_ty_4 = 136;
pub const IPPROTO_MPLS: _bindgen_ty_4 = 137;
pub const IPPROTO_ETHERNET: _bindgen_ty_4 = 143;
pub const IPPROTO_RAW: _bindgen_ty_4 = 255;
pub const IPPROTO_MPTCP: _bindgen_ty_4 = 262;
pub const IPPROTO_MAX: _bindgen_ty_4 = 263;
pub type _bindgen_ty_4 = ::std::ffi::c_uint;
pub const IPPROTO_HOPOPTS: _bindgen_ty_5 = 0;
pub const IPPROTO_ROUTING: _bindgen_ty_5 = 43;
pub const IPPROTO_FRAGMENT: _bindgen_ty_5 = 44;
pub const IPPROTO_ICMPV6: _bindgen_ty_5 = 58;
pub const IPPROTO_NONE: _bindgen_ty_5 = 59;
pub const IPPROTO_DSTOPTS: _bindgen_ty_5 = 60;
pub const IPPROTO_MH: _bindgen_ty_5 = 135;
pub type _bindgen_ty_5 = ::std::ffi::c_uint;
pub type in_port_t = u16;
pub const IPPORT_ECHO: _bindgen_ty_6 = 7;
pub const IPPORT_DISCARD: _bindgen_ty_6 = 9;
pub const IPPORT_SYSTAT: _bindgen_ty_6 = 11;
pub const IPPORT_DAYTIME: _bindgen_ty_6 = 13;
pub const IPPORT_NETSTAT: _bindgen_ty_6 = 15;
pub const IPPORT_FTP: _bindgen_ty_6 = 21;
pub const IPPORT_TELNET: _bindgen_ty_6 = 23;
pub const IPPORT_SMTP: _bindgen_ty_6 = 25;
pub const IPPORT_TIMESERVER: _bindgen_ty_6 = 37;
pub const IPPORT_NAMESERVER: _bindgen_ty_6 = 42;
pub const IPPORT_WHOIS: _bindgen_ty_6 = 43;
pub const IPPORT_MTP: _bindgen_ty_6 = 57;
pub const IPPORT_TFTP: _bindgen_ty_6 = 69;
pub const IPPORT_RJE: _bindgen_ty_6 = 77;
pub const IPPORT_FINGER: _bindgen_ty_6 = 79;
pub const IPPORT_TTYLINK: _bindgen_ty_6 = 87;
pub const IPPORT_SUPDUP: _bindgen_ty_6 = 95;
pub const IPPORT_EXECSERVER: _bindgen_ty_6 = 512;
pub const IPPORT_LOGINSERVER: _bindgen_ty_6 = 513;
pub const IPPORT_CMDSERVER: _bindgen_ty_6 = 514;
pub const IPPORT_EFSSERVER: _bindgen_ty_6 = 520;
pub const IPPORT_BIFFUDP: _bindgen_ty_6 = 512;
pub const IPPORT_WHOSERVER: _bindgen_ty_6 = 513;
pub const IPPORT_ROUTESERVER: _bindgen_ty_6 = 520;
pub const IPPORT_RESERVED: _bindgen_ty_6 = 1024;
pub const IPPORT_USERRESERVED: _bindgen_ty_6 = 5000;
pub type _bindgen_ty_6 = ::std::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_addr {
    pub __in6_u: in6_addr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union in6_addr__bindgen_ty_1 {
    pub __u6_addr8: [u8; 16usize],
    pub __u6_addr16: [u16; 8usize],
    pub __u6_addr32: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of in6_addr__bindgen_ty_1"][::std::mem::size_of::<in6_addr__bindgen_ty_1>() - 16usize];
    ["Alignment of in6_addr__bindgen_ty_1"]
        [::std::mem::align_of::<in6_addr__bindgen_ty_1>() - 4usize];
    ["Offset of field: in6_addr__bindgen_ty_1::__u6_addr8"]
        [::std::mem::offset_of!(in6_addr__bindgen_ty_1, __u6_addr8) - 0usize];
    ["Offset of field: in6_addr__bindgen_ty_1::__u6_addr16"]
        [::std::mem::offset_of!(in6_addr__bindgen_ty_1, __u6_addr16) - 0usize];
    ["Offset of field: in6_addr__bindgen_ty_1::__u6_addr32"]
        [::std::mem::offset_of!(in6_addr__bindgen_ty_1, __u6_addr32) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of in6_addr"][::std::mem::size_of::<in6_addr>() - 16usize];
    ["Alignment of in6_addr"][::std::mem::align_of::<in6_addr>() - 4usize];
    ["Offset of field: in6_addr::__in6_u"][::std::mem::offset_of!(in6_addr, __in6_u) - 0usize];
};
extern "C" {
    pub static in6addr_any: in6_addr;
}
extern "C" {
    pub static in6addr_loopback: in6_addr;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_in {
    pub sin_family: sa_family_t,
    pub sin_port: in_port_t,
    pub sin_addr: in_addr,
    pub sin_zero: [::std::ffi::c_uchar; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sockaddr_in"][::std::mem::size_of::<sockaddr_in>() - 16usize];
    ["Alignment of sockaddr_in"][::std::mem::align_of::<sockaddr_in>() - 4usize];
    ["Offset of field: sockaddr_in::sin_family"]
        [::std::mem::offset_of!(sockaddr_in, sin_family) - 0usize];
    ["Offset of field: sockaddr_in::sin_port"]
        [::std::mem::offset_of!(sockaddr_in, sin_port) - 2usize];
    ["Offset of field: sockaddr_in::sin_addr"]
        [::std::mem::offset_of!(sockaddr_in, sin_addr) - 4usize];
    ["Offset of field: sockaddr_in::sin_zero"]
        [::std::mem::offset_of!(sockaddr_in, sin_zero) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sockaddr_in6 {
    pub sin6_family: sa_family_t,
    pub sin6_port: in_port_t,
    pub sin6_flowinfo: u32,
    pub sin6_addr: in6_addr,
    pub sin6_scope_id: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sockaddr_in6"][::std::mem::size_of::<sockaddr_in6>() - 28usize];
    ["Alignment of sockaddr_in6"][::std::mem::align_of::<sockaddr_in6>() - 4usize];
    ["Offset of field: sockaddr_in6::sin6_family"]
        [::std::mem::offset_of!(sockaddr_in6, sin6_family) - 0usize];
    ["Offset of field: sockaddr_in6::sin6_port"]
        [::std::mem::offset_of!(sockaddr_in6, sin6_port) - 2usize];
    ["Offset of field: sockaddr_in6::sin6_flowinfo"]
        [::std::mem::offset_of!(sockaddr_in6, sin6_flowinfo) - 4usize];
    ["Offset of field: sockaddr_in6::sin6_addr"]
        [::std::mem::offset_of!(sockaddr_in6, sin6_addr) - 8usize];
    ["Offset of field: sockaddr_in6::sin6_scope_id"]
        [::std::mem::offset_of!(sockaddr_in6, sin6_scope_id) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreq {
    pub imr_multiaddr: in_addr,
    pub imr_interface: in_addr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ip_mreq"][::std::mem::size_of::<ip_mreq>() - 8usize];
    ["Alignment of ip_mreq"][::std::mem::align_of::<ip_mreq>() - 4usize];
    ["Offset of field: ip_mreq::imr_multiaddr"]
        [::std::mem::offset_of!(ip_mreq, imr_multiaddr) - 0usize];
    ["Offset of field: ip_mreq::imr_interface"]
        [::std::mem::offset_of!(ip_mreq, imr_interface) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreqn {
    pub imr_multiaddr: in_addr,
    pub imr_address: in_addr,
    pub imr_ifindex: ::std::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ip_mreqn"][::std::mem::size_of::<ip_mreqn>() - 12usize];
    ["Alignment of ip_mreqn"][::std::mem::align_of::<ip_mreqn>() - 4usize];
    ["Offset of field: ip_mreqn::imr_multiaddr"]
        [::std::mem::offset_of!(ip_mreqn, imr_multiaddr) - 0usize];
    ["Offset of field: ip_mreqn::imr_address"]
        [::std::mem::offset_of!(ip_mreqn, imr_address) - 4usize];
    ["Offset of field: ip_mreqn::imr_ifindex"]
        [::std::mem::offset_of!(ip_mreqn, imr_ifindex) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreq_source {
    pub imr_multiaddr: in_addr,
    pub imr_interface: in_addr,
    pub imr_sourceaddr: in_addr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ip_mreq_source"][::std::mem::size_of::<ip_mreq_source>() - 12usize];
    ["Alignment of ip_mreq_source"][::std::mem::align_of::<ip_mreq_source>() - 4usize];
    ["Offset of field: ip_mreq_source::imr_multiaddr"]
        [::std::mem::offset_of!(ip_mreq_source, imr_multiaddr) - 0usize];
    ["Offset of field: ip_mreq_source::imr_interface"]
        [::std::mem::offset_of!(ip_mreq_source, imr_interface) - 4usize];
    ["Offset of field: ip_mreq_source::imr_sourceaddr"]
        [::std::mem::offset_of!(ip_mreq_source, imr_sourceaddr) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ipv6_mreq {
    pub ipv6mr_multiaddr: in6_addr,
    pub ipv6mr_interface: ::std::ffi::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ipv6_mreq"][::std::mem::size_of::<ipv6_mreq>() - 20usize];
    ["Alignment of ipv6_mreq"][::std::mem::align_of::<ipv6_mreq>() - 4usize];
    ["Offset of field: ipv6_mreq::ipv6mr_multiaddr"]
        [::std::mem::offset_of!(ipv6_mreq, ipv6mr_multiaddr) - 0usize];
    ["Offset of field: ipv6_mreq::ipv6mr_interface"]
        [::std::mem::offset_of!(ipv6_mreq, ipv6mr_interface) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct group_req {
    pub gr_interface: u32,
    pub gr_group: sockaddr_storage,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of group_req"][::std::mem::size_of::<group_req>() - 136usize];
    ["Alignment of group_req"][::std::mem::align_of::<group_req>() - 8usize];
    ["Offset of field: group_req::gr_interface"]
        [::std::mem::offset_of!(group_req, gr_interface) - 0usize];
    ["Offset of field: group_req::gr_group"][::std::mem::offset_of!(group_req, gr_group) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct group_source_req {
    pub gsr_interface: u32,
    pub gsr_group: sockaddr_storage,
    pub gsr_source: sockaddr_storage,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of group_source_req"][::std::mem::size_of::<group_source_req>() - 264usize];
    ["Alignment of group_source_req"][::std::mem::align_of::<group_source_req>() - 8usize];
    ["Offset of field: group_source_req::gsr_interface"]
        [::std::mem::offset_of!(group_source_req, gsr_interface) - 0usize];
    ["Offset of field: group_source_req::gsr_group"]
        [::std::mem::offset_of!(group_source_req, gsr_group) - 8usize];
    ["Offset of field: group_source_req::gsr_source"]
        [::std::mem::offset_of!(group_source_req, gsr_source) - 136usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_msfilter {
    pub imsf_multiaddr: in_addr,
    pub imsf_interface: in_addr,
    pub imsf_fmode: u32,
    pub imsf_numsrc: u32,
    pub imsf_slist: [in_addr; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ip_msfilter"][::std::mem::size_of::<ip_msfilter>() - 20usize];
    ["Alignment of ip_msfilter"][::std::mem::align_of::<ip_msfilter>() - 4usize];
    ["Offset of field: ip_msfilter::imsf_multiaddr"]
        [::std::mem::offset_of!(ip_msfilter, imsf_multiaddr) - 0usize];
    ["Offset of field: ip_msfilter::imsf_interface"]
        [::std::mem::offset_of!(ip_msfilter, imsf_interface) - 4usize];
    ["Offset of field: ip_msfilter::imsf_fmode"]
        [::std::mem::offset_of!(ip_msfilter, imsf_fmode) - 8usize];
    ["Offset of field: ip_msfilter::imsf_numsrc"]
        [::std::mem::offset_of!(ip_msfilter, imsf_numsrc) - 12usize];
    ["Offset of field: ip_msfilter::imsf_slist"]
        [::std::mem::offset_of!(ip_msfilter, imsf_slist) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct group_filter {
    pub gf_interface: u32,
    pub gf_group: sockaddr_storage,
    pub gf_fmode: u32,
    pub gf_numsrc: u32,
    pub gf_slist: [sockaddr_storage; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of group_filter"][::std::mem::size_of::<group_filter>() - 272usize];
    ["Alignment of group_filter"][::std::mem::align_of::<group_filter>() - 8usize];
    ["Offset of field: group_filter::gf_interface"]
        [::std::mem::offset_of!(group_filter, gf_interface) - 0usize];
    ["Offset of field: group_filter::gf_group"]
        [::std::mem::offset_of!(group_filter, gf_group) - 8usize];
    ["Offset of field: group_filter::gf_fmode"]
        [::std::mem::offset_of!(group_filter, gf_fmode) - 136usize];
    ["Offset of field: group_filter::gf_numsrc"]
        [::std::mem::offset_of!(group_filter, gf_numsrc) - 140usize];
    ["Offset of field: group_filter::gf_slist"]
        [::std::mem::offset_of!(group_filter, gf_slist) - 144usize];
};
extern "C" {
    pub fn ntohl(__netlong: u32) -> u32;
}
extern "C" {
    pub fn ntohs(__netshort: u16) -> u16;
}
extern "C" {
    pub fn htonl(__hostlong: u32) -> u32;
}
extern "C" {
    pub fn htons(__hostshort: u16) -> u16;
}
extern "C" {
    pub fn bindresvport(
        __sockfd: ::std::ffi::c_int,
        __sock_in: *mut sockaddr_in,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn bindresvport6(
        __sockfd: ::std::ffi::c_int,
        __sock_in: *mut sockaddr_in6,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn inet_addr(__cp: *const ::std::ffi::c_char) -> in_addr_t;
}
extern "C" {
    pub fn inet_lnaof(__in: in_addr) -> in_addr_t;
}
extern "C" {
    pub fn inet_makeaddr(__net: in_addr_t, __host: in_addr_t) -> in_addr;
}
extern "C" {
    pub fn inet_netof(__in: in_addr) -> in_addr_t;
}
extern "C" {
    pub fn inet_network(__cp: *const ::std::ffi::c_char) -> in_addr_t;
}
extern "C" {
    pub fn inet_ntoa(__in: in_addr) -> *mut ::std::ffi::c_char;
}
extern "C" {
    pub fn inet_pton(
        __af: ::std::ffi::c_int,
        __cp: *const ::std::ffi::c_char,
        __buf: *mut ::std::ffi::c_void,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn inet_ntop(
        __af: ::std::ffi::c_int,
        __cp: *const ::std::ffi::c_void,
        __buf: *mut ::std::ffi::c_char,
        __len: socklen_t,
    ) -> *const ::std::ffi::c_char;
}
extern "C" {
    pub fn inet_aton(__cp: *const ::std::ffi::c_char, __inp: *mut in_addr) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn inet_neta(
        __net: in_addr_t,
        __buf: *mut ::std::ffi::c_char,
        __len: usize,
    ) -> *mut ::std::ffi::c_char;
}
extern "C" {
    pub fn inet_net_ntop(
        __af: ::std::ffi::c_int,
        __cp: *const ::std::ffi::c_void,
        __bits: ::std::ffi::c_int,
        __buf: *mut ::std::ffi::c_char,
        __len: usize,
    ) -> *mut ::std::ffi::c_char;
}
extern "C" {
    pub fn inet_net_pton(
        __af: ::std::ffi::c_int,
        __cp: *const ::std::ffi::c_char,
        __buf: *mut ::std::ffi::c_void,
        __len: usize,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn inet_nsap_addr(
        __cp: *const ::std::ffi::c_char,
        __buf: *mut ::std::ffi::c_uchar,
        __len: ::std::ffi::c_int,
    ) -> ::std::ffi::c_uint;
}
extern "C" {
    pub fn inet_nsap_ntoa(
        __len: ::std::ffi::c_int,
        __cp: *const ::std::ffi::c_uchar,
        __buf: *mut ::std::ffi::c_char,
    ) -> *mut ::std::ffi::c_char;
}
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::ffi::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::ffi::c_uint,
    pub __wchb: [::std::ffi::c_char; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __mbstate_t__bindgen_ty_1"]
        [::std::mem::size_of::<__mbstate_t__bindgen_ty_1>() - 4usize];
    ["Alignment of __mbstate_t__bindgen_ty_1"]
        [::std::mem::align_of::<__mbstate_t__bindgen_ty_1>() - 4usize];
    ["Offset of field: __mbstate_t__bindgen_ty_1::__wch"]
        [::std::mem::offset_of!(__mbstate_t__bindgen_ty_1, __wch) - 0usize];
    ["Offset of field: __mbstate_t__bindgen_ty_1::__wchb"]
        [::std::mem::offset_of!(__mbstate_t__bindgen_ty_1, __wchb) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __mbstate_t"][::std::mem::size_of::<__mbstate_t>() - 8usize];
    ["Alignment of __mbstate_t"][::std::mem::align_of::<__mbstate_t>() - 4usize];
    ["Offset of field: __mbstate_t::__count"]
        [::std::mem::offset_of!(__mbstate_t, __count) - 0usize];
    ["Offset of field: __mbstate_t::__value"]
        [::std::mem::offset_of!(__mbstate_t, __value) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _G_fpos_t"][::std::mem::size_of::<_G_fpos_t>() - 16usize];
    ["Alignment of _G_fpos_t"][::std::mem::align_of::<_G_fpos_t>() - 8usize];
    ["Offset of field: _G_fpos_t::__pos"][::std::mem::offset_of!(_G_fpos_t, __pos) - 0usize];
    ["Offset of field: _G_fpos_t::__state"][::std::mem::offset_of!(_G_fpos_t, __state) - 8usize];
};
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _G_fpos64_t"][::std::mem::size_of::<_G_fpos64_t>() - 16usize];
    ["Alignment of _G_fpos64_t"][::std::mem::align_of::<_G_fpos64_t>() - 8usize];
    ["Offset of field: _G_fpos64_t::__pos"][::std::mem::offset_of!(_G_fpos64_t, __pos) - 0usize];
    ["Offset of field: _G_fpos64_t::__state"]
        [::std::mem::offset_of!(_G_fpos64_t, __state) - 8usize];
};
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::ffi::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::ffi::c_int,
    pub _IO_read_ptr: *mut ::std::ffi::c_char,
    pub _IO_read_end: *mut ::std::ffi::c_char,
    pub _IO_read_base: *mut ::std::ffi::c_char,
    pub _IO_write_base: *mut ::std::ffi::c_char,
    pub _IO_write_ptr: *mut ::std::ffi::c_char,
    pub _IO_write_end: *mut ::std::ffi::c_char,
    pub _IO_buf_base: *mut ::std::ffi::c_char,
    pub _IO_buf_end: *mut ::std::ffi::c_char,
    pub _IO_save_base: *mut ::std::ffi::c_char,
    pub _IO_backup_base: *mut ::std::ffi::c_char,
    pub _IO_save_end: *mut ::std::ffi::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::ffi::c_int,
    pub _flags2: ::std::ffi::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::ffi::c_ushort,
    pub _vtable_offset: ::std::ffi::c_schar,
    pub _shortbuf: [::std::ffi::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::ffi::c_void,
    pub _prevchain: *mut *mut _IO_FILE,
    pub _mode: ::std::ffi::c_int,
    pub _unused2: [::std::ffi::c_char; 20usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IO_FILE"][::std::mem::size_of::<_IO_FILE>() - 216usize];
    ["Alignment of _IO_FILE"][::std::mem::align_of::<_IO_FILE>() - 8usize];
    ["Offset of field: _IO_FILE::_flags"][::std::mem::offset_of!(_IO_FILE, _flags) - 0usize];
    ["Offset of field: _IO_FILE::_IO_read_ptr"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_ptr) - 8usize];
    ["Offset of field: _IO_FILE::_IO_read_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_end) - 16usize];
    ["Offset of field: _IO_FILE::_IO_read_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_base) - 24usize];
    ["Offset of field: _IO_FILE::_IO_write_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_base) - 32usize];
    ["Offset of field: _IO_FILE::_IO_write_ptr"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_ptr) - 40usize];
    ["Offset of field: _IO_FILE::_IO_write_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_end) - 48usize];
    ["Offset of field: _IO_FILE::_IO_buf_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_buf_base) - 56usize];
    ["Offset of field: _IO_FILE::_IO_buf_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_buf_end) - 64usize];
    ["Offset of field: _IO_FILE::_IO_save_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_save_base) - 72usize];
    ["Offset of field: _IO_FILE::_IO_backup_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_backup_base) - 80usize];
    ["Offset of field: _IO_FILE::_IO_save_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_save_end) - 88usize];
    ["Offset of field: _IO_FILE::_markers"][::std::mem::offset_of!(_IO_FILE, _markers) - 96usize];
    ["Offset of field: _IO_FILE::_chain"][::std::mem::offset_of!(_IO_FILE, _chain) - 104usize];
    ["Offset of field: _IO_FILE::_fileno"][::std::mem::offset_of!(_IO_FILE, _fileno) - 112usize];
    ["Offset of field: _IO_FILE::_flags2"][::std::mem::offset_of!(_IO_FILE, _flags2) - 116usize];
    ["Offset of field: _IO_FILE::_old_offset"]
        [::std::mem::offset_of!(_IO_FILE, _old_offset) - 120usize];
    ["Offset of field: _IO_FILE::_cur_column"]
        [::std::mem::offset_of!(_IO_FILE, _cur_column) - 128usize];
    ["Offset of field: _IO_FILE::_vtable_offset"]
        [::std::mem::offset_of!(_IO_FILE, _vtable_offset) - 130usize];
    ["Offset of field: _IO_FILE::_shortbuf"]
        [::std::mem::offset_of!(_IO_FILE, _shortbuf) - 131usize];
    ["Offset of field: _IO_FILE::_lock"][::std::mem::offset_of!(_IO_FILE, _lock) - 136usize];
    ["Offset of field: _IO_FILE::_offset"][::std::mem::offset_of!(_IO_FILE, _offset) - 144usize];
    ["Offset of field: _IO_FILE::_codecvt"][::std::mem::offset_of!(_IO_FILE, _codecvt) - 152usize];
    ["Offset of field: _IO_FILE::_wide_data"]
        [::std::mem::offset_of!(_IO_FILE, _wide_data) - 160usize];
    ["Offset of field: _IO_FILE::_freeres_list"]
        [::std::mem::offset_of!(_IO_FILE, _freeres_list) - 168usize];
    ["Offset of field: _IO_FILE::_freeres_buf"]
        [::std::mem::offset_of!(_IO_FILE, _freeres_buf) - 176usize];
    ["Offset of field: _IO_FILE::_prevchain"]
        [::std::mem::offset_of!(_IO_FILE, _prevchain) - 184usize];
    ["Offset of field: _IO_FILE::_mode"][::std::mem::offset_of!(_IO_FILE, _mode) - 192usize];
    ["Offset of field: _IO_FILE::_unused2"][::std::mem::offset_of!(_IO_FILE, _unused2) - 196usize];
};
pub type cookie_read_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::ffi::c_void,
        __buf: *mut ::std::ffi::c_char,
        __nbytes: usize,
    ) -> __ssize_t,
>;
pub type cookie_write_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::ffi::c_void,
        __buf: *const ::std::ffi::c_char,
        __nbytes: usize,
    ) -> __ssize_t,
>;
pub type cookie_seek_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::ffi::c_void,
        __pos: *mut __off64_t,
        __w: ::std::ffi::c_int,
    ) -> ::std::ffi::c_int,
>;
pub type cookie_close_function_t = ::std::option::Option<
    unsafe extern "C" fn(__cookie: *mut ::std::ffi::c_void) -> ::std::ffi::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_cookie_io_functions_t {
    pub read: cookie_read_function_t,
    pub write: cookie_write_function_t,
    pub seek: cookie_seek_function_t,
    pub close: cookie_close_function_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IO_cookie_io_functions_t"]
        [::std::mem::size_of::<_IO_cookie_io_functions_t>() - 32usize];
    ["Alignment of _IO_cookie_io_functions_t"]
        [::std::mem::align_of::<_IO_cookie_io_functions_t>() - 8usize];
    ["Offset of field: _IO_cookie_io_functions_t::read"]
        [::std::mem::offset_of!(_IO_cookie_io_functions_t, read) - 0usize];
    ["Offset of field: _IO_cookie_io_functions_t::write"]
        [::std::mem::offset_of!(_IO_cookie_io_functions_t, write) - 8usize];
    ["Offset of field: _IO_cookie_io_functions_t::seek"]
        [::std::mem::offset_of!(_IO_cookie_io_functions_t, seek) - 16usize];
    ["Offset of field: _IO_cookie_io_functions_t::close"]
        [::std::mem::offset_of!(_IO_cookie_io_functions_t, close) - 24usize];
};
pub type cookie_io_functions_t = _IO_cookie_io_functions_t;
pub type va_list = __gnuc_va_list;
pub type fpos_t = __fpos_t;
extern "C" {
    pub static mut stdin: *mut FILE;
}
extern "C" {
    pub static mut stdout: *mut FILE;
}
extern "C" {
    pub static mut stderr: *mut FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::ffi::c_char) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::ffi::c_char,
        __new: *const ::std::ffi::c_char,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::std::ffi::c_int,
        __old: *const ::std::ffi::c_char,
        __newfd: ::std::ffi::c_int,
        __new: *const ::std::ffi::c_char,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(arg1: *mut ::std::ffi::c_char) -> *mut ::std::ffi::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::ffi::c_char) -> *mut ::std::ffi::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::ffi::c_char,
        __pfx: *const ::std::ffi::c_char,
    ) -> *mut ::std::ffi::c_char;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::ffi::c_char,
        __modes: *const ::std::ffi::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::std::ffi::c_char,
        __modes: *const ::std::ffi::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::ffi::c_int, __modes: *const ::std::ffi::c_char) -> *mut FILE;
}
extern "C" {
    pub fn fopencookie(
        __magic_cookie: *mut ::std::ffi::c_void,
        __modes: *const ::std::ffi::c_char,
        __io_funcs: cookie_io_functions_t,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::ffi::c_void,
        __len: usize,
        __modes: *const ::std::ffi::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::ffi::c_char,
        __sizeloc: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::ffi::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::ffi::c_char,
        __modes: ::std::ffi::c_int,
        __n: usize,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::ffi::c_char, __size: usize);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::ffi::c_char,
        ...
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::ffi::c_char, ...) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::ffi::c_char,
        __format: *const ::std::ffi::c_char,
        ...
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::ffi::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::std::ffi::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::ffi::c_char,
        __format: *const ::std::ffi::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::std::ffi::c_char,
        __maxlen: ::std::ffi::c_ulong,
        __format: *const ::std::ffi::c_char,
        ...
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::ffi::c_char,
        __maxlen: ::std::ffi::c_ulong,
        __format: *const ::std::ffi::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn vasprintf(
        __ptr: *mut *mut ::std::ffi::c_char,
        __f: *const ::std::ffi::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn __asprintf(
        __ptr: *mut *mut ::std::ffi::c_char,
        __fmt: *const ::std::ffi::c_char,
        ...
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn asprintf(
        __ptr: *mut *mut ::std::ffi::c_char,
        __fmt: *const ::std::ffi::c_char,
        ...
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::ffi::c_int,
        __fmt: *const ::std::ffi::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::ffi::c_int,
        __fmt: *const ::std::ffi::c_char,
        ...
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::ffi::c_char,
        ...
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::ffi::c_char, ...) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::ffi::c_char,
        __format: *const ::std::ffi::c_char,
        ...
    ) -> ::std::ffi::c_int;
}
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::ffi::c_char,
        ...
    ) -> ::std::ffi::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::ffi::c_char, ...) -> ::std::ffi::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::ffi::c_char,
        __format: *const ::std::ffi::c_char,
        ...
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::ffi::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::ffi::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::ffi::c_char,
        __format: *const ::std::ffi::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::ffi::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::ffi::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::ffi::c_char,
        __format: *const ::std::ffi::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::ffi::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::ffi::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::ffi::c_int, __stream: *mut FILE) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::ffi::c_int, __stream: *mut FILE) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::ffi::c_int) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::ffi::c_int, __stream: *mut FILE) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::ffi::c_int, __stream: *mut FILE) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::ffi::c_int) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::ffi::c_int, __stream: *mut FILE) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::std::ffi::c_char,
        __n: ::std::ffi::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::ffi::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::ffi::c_char,
        __n: *mut usize,
        __delimiter: ::std::ffi::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::ffi::c_char,
        __n: *mut usize,
        __delimiter: ::std::ffi::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::ffi::c_char,
        __n: *mut usize,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::ffi::c_char, __stream: *mut FILE) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::ffi::c_char) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::ffi::c_int, __stream: *mut FILE) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::ffi::c_void,
        __size: ::std::ffi::c_ulong,
        __n: ::std::ffi::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::ffi::c_ulong;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::ffi::c_void,
        __size: ::std::ffi::c_ulong,
        __n: ::std::ffi::c_ulong,
        __s: *mut FILE,
    ) -> ::std::ffi::c_ulong;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::ffi::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::ffi::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::ffi::c_long,
        __whence: ::std::ffi::c_int,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::ffi::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::ffi::c_int,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::ffi::c_char);
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::ffi::c_char,
        __modes: *const ::std::ffi::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::ffi::c_char) -> *mut ::std::ffi::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut FILE, arg2: ::std::ffi::c_int) -> ::std::ffi::c_int;
}
pub type wchar_t = ::std::ffi::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::ffi::c_int,
    pub rem: ::std::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of div_t"][::std::mem::size_of::<div_t>() - 8usize];
    ["Alignment of div_t"][::std::mem::align_of::<div_t>() - 4usize];
    ["Offset of field: div_t::quot"][::std::mem::offset_of!(div_t, quot) - 0usize];
    ["Offset of field: div_t::rem"][::std::mem::offset_of!(div_t, rem) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::ffi::c_long,
    pub rem: ::std::ffi::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ldiv_t"][::std::mem::size_of::<ldiv_t>() - 16usize];
    ["Alignment of ldiv_t"][::std::mem::align_of::<ldiv_t>() - 8usize];
    ["Offset of field: ldiv_t::quot"][::std::mem::offset_of!(ldiv_t, quot) - 0usize];
    ["Offset of field: ldiv_t::rem"][::std::mem::offset_of!(ldiv_t, rem) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::ffi::c_longlong,
    pub rem: ::std::ffi::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lldiv_t"][::std::mem::size_of::<lldiv_t>() - 16usize];
    ["Alignment of lldiv_t"][::std::mem::align_of::<lldiv_t>() - 8usize];
    ["Offset of field: lldiv_t::quot"][::std::mem::offset_of!(lldiv_t, quot) - 0usize];
    ["Offset of field: lldiv_t::rem"][::std::mem::offset_of!(lldiv_t, rem) - 8usize];
};
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> usize;
}
extern "C" {
    pub fn atof(__nptr: *const ::std::ffi::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ::std::ffi::c_char) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ::std::ffi::c_char) -> ::std::ffi::c_long;
}
extern "C" {
    pub fn atoll(__nptr: *const ::std::ffi::c_char) -> ::std::ffi::c_longlong;
}
extern "C" {
    pub fn strtod(__nptr: *const ::std::ffi::c_char, __endptr: *mut *mut ::std::ffi::c_char)
        -> f64;
}
extern "C" {
    pub fn strtof(__nptr: *const ::std::ffi::c_char, __endptr: *mut *mut ::std::ffi::c_char)
        -> f32;
}
extern "C" {
    pub fn strtold(
        __nptr: *const ::std::ffi::c_char,
        __endptr: *mut *mut ::std::ffi::c_char,
    ) -> u128;
}
extern "C" {
    pub fn strtol(
        __nptr: *const ::std::ffi::c_char,
        __endptr: *mut *mut ::std::ffi::c_char,
        __base: ::std::ffi::c_int,
    ) -> ::std::ffi::c_long;
}
extern "C" {
    pub fn strtoul(
        __nptr: *const ::std::ffi::c_char,
        __endptr: *mut *mut ::std::ffi::c_char,
        __base: ::std::ffi::c_int,
    ) -> ::std::ffi::c_ulong;
}
extern "C" {
    pub fn strtoq(
        __nptr: *const ::std::ffi::c_char,
        __endptr: *mut *mut ::std::ffi::c_char,
        __base: ::std::ffi::c_int,
    ) -> ::std::ffi::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __nptr: *const ::std::ffi::c_char,
        __endptr: *mut *mut ::std::ffi::c_char,
        __base: ::std::ffi::c_int,
    ) -> ::std::ffi::c_ulonglong;
}
extern "C" {
    pub fn strtoll(
        __nptr: *const ::std::ffi::c_char,
        __endptr: *mut *mut ::std::ffi::c_char,
        __base: ::std::ffi::c_int,
    ) -> ::std::ffi::c_longlong;
}
extern "C" {
    pub fn strtoull(
        __nptr: *const ::std::ffi::c_char,
        __endptr: *mut *mut ::std::ffi::c_char,
        __base: ::std::ffi::c_int,
    ) -> ::std::ffi::c_ulonglong;
}
extern "C" {
    pub fn l64a(__n: ::std::ffi::c_long) -> *mut ::std::ffi::c_char;
}
extern "C" {
    pub fn a64l(__s: *const ::std::ffi::c_char) -> ::std::ffi::c_long;
}
extern "C" {
    pub fn random() -> ::std::ffi::c_long;
}
extern "C" {
    pub fn srandom(__seed: ::std::ffi::c_uint);
}
extern "C" {
    pub fn initstate(
        __seed: ::std::ffi::c_uint,
        __statebuf: *mut ::std::ffi::c_char,
        __statelen: usize,
    ) -> *mut ::std::ffi::c_char;
}
extern "C" {
    pub fn setstate(__statebuf: *mut ::std::ffi::c_char) -> *mut ::std::ffi::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::ffi::c_int,
    pub rand_deg: ::std::ffi::c_int,
    pub rand_sep: ::std::ffi::c_int,
    pub end_ptr: *mut i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of random_data"][::std::mem::size_of::<random_data>() - 48usize];
    ["Alignment of random_data"][::std::mem::align_of::<random_data>() - 8usize];
    ["Offset of field: random_data::fptr"][::std::mem::offset_of!(random_data, fptr) - 0usize];
    ["Offset of field: random_data::rptr"][::std::mem::offset_of!(random_data, rptr) - 8usize];
    ["Offset of field: random_data::state"][::std::mem::offset_of!(random_data, state) - 16usize];
    ["Offset of field: random_data::rand_type"]
        [::std::mem::offset_of!(random_data, rand_type) - 24usize];
    ["Offset of field: random_data::rand_deg"]
        [::std::mem::offset_of!(random_data, rand_deg) - 28usize];
    ["Offset of field: random_data::rand_sep"]
        [::std::mem::offset_of!(random_data, rand_sep) - 32usize];
    ["Offset of field: random_data::end_ptr"]
        [::std::mem::offset_of!(random_data, end_ptr) - 40usize];
};
extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn srandom_r(__seed: ::std::ffi::c_uint, __buf: *mut random_data) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn initstate_r(
        __seed: ::std::ffi::c_uint,
        __statebuf: *mut ::std::ffi::c_char,
        __statelen: usize,
        __buf: *mut random_data,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn setstate_r(
        __statebuf: *mut ::std::ffi::c_char,
        __buf: *mut random_data,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn rand() -> ::std::ffi::c_int;
}
extern "C" {
    pub fn srand(__seed: ::std::ffi::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut ::std::ffi::c_uint) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut ::std::ffi::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> ::std::ffi::c_long;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::ffi::c_ushort) -> ::std::ffi::c_long;
}
extern "C" {
    pub fn mrand48() -> ::std::ffi::c_long;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::ffi::c_ushort) -> ::std::ffi::c_long;
}
extern "C" {
    pub fn srand48(__seedval: ::std::ffi::c_long);
}
extern "C" {
    pub fn seed48(__seed16v: *mut ::std::ffi::c_ushort) -> *mut ::std::ffi::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut ::std::ffi::c_ushort);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drand48_data {
    pub __x: [::std::ffi::c_ushort; 3usize],
    pub __old_x: [::std::ffi::c_ushort; 3usize],
    pub __c: ::std::ffi::c_ushort,
    pub __init: ::std::ffi::c_ushort,
    pub __a: ::std::ffi::c_ulonglong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drand48_data"][::std::mem::size_of::<drand48_data>() - 24usize];
    ["Alignment of drand48_data"][::std::mem::align_of::<drand48_data>() - 8usize];
    ["Offset of field: drand48_data::__x"][::std::mem::offset_of!(drand48_data, __x) - 0usize];
    ["Offset of field: drand48_data::__old_x"]
        [::std::mem::offset_of!(drand48_data, __old_x) - 6usize];
    ["Offset of field: drand48_data::__c"][::std::mem::offset_of!(drand48_data, __c) - 12usize];
    ["Offset of field: drand48_data::__init"]
        [::std::mem::offset_of!(drand48_data, __init) - 14usize];
    ["Offset of field: drand48_data::__a"][::std::mem::offset_of!(drand48_data, __a) - 16usize];
};
extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn erand48_r(
        __xsubi: *mut ::std::ffi::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn lrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::ffi::c_long,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn nrand48_r(
        __xsubi: *mut ::std::ffi::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::ffi::c_long,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn mrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::ffi::c_long,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn jrand48_r(
        __xsubi: *mut ::std::ffi::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::ffi::c_long,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn srand48_r(
        __seedval: ::std::ffi::c_long,
        __buffer: *mut drand48_data,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn seed48_r(
        __seed16v: *mut ::std::ffi::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn lcong48_r(
        __param: *mut ::std::ffi::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn arc4random() -> __uint32_t;
}
extern "C" {
    pub fn arc4random_buf(__buf: *mut ::std::ffi::c_void, __size: usize);
}
extern "C" {
    pub fn arc4random_uniform(__upper_bound: __uint32_t) -> __uint32_t;
}
extern "C" {
    pub fn malloc(__size: ::std::ffi::c_ulong) -> *mut ::std::ffi::c_void;
}
extern "C" {
    pub fn calloc(
        __nmemb: ::std::ffi::c_ulong,
        __size: ::std::ffi::c_ulong,
    ) -> *mut ::std::ffi::c_void;
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::ffi::c_void,
        __size: ::std::ffi::c_ulong,
    ) -> *mut ::std::ffi::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ::std::ffi::c_void);
}
extern "C" {
    pub fn reallocarray(
        __ptr: *mut ::std::ffi::c_void,
        __nmemb: usize,
        __size: usize,
    ) -> *mut ::std::ffi::c_void;
}
extern "C" {
    pub fn alloca(__size: ::std::ffi::c_ulong) -> *mut ::std::ffi::c_void;
}
extern "C" {
    pub fn valloc(__size: usize) -> *mut ::std::ffi::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::ffi::c_void,
        __alignment: usize,
        __size: usize,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn aligned_alloc(
        __alignment: ::std::ffi::c_ulong,
        __size: ::std::ffi::c_ulong,
    ) -> *mut ::std::ffi::c_void;
}
extern "C" {
    pub fn abort() -> !;
}
extern "C" {
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn at_quick_exit(
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn on_exit(
        __func: ::std::option::Option<
            unsafe extern "C" fn(__status: ::std::ffi::c_int, __arg: *mut ::std::ffi::c_void),
        >,
        __arg: *mut ::std::ffi::c_void,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn exit(__status: ::std::ffi::c_int) -> !;
}
extern "C" {
    pub fn quick_exit(__status: ::std::ffi::c_int) -> !;
}
extern "C" {
    pub fn _Exit(__status: ::std::ffi::c_int) -> !;
}
extern "C" {
    pub fn getenv(__name: *const ::std::ffi::c_char) -> *mut ::std::ffi::c_char;
}
extern "C" {
    pub fn putenv(__string: *mut ::std::ffi::c_char) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::ffi::c_char,
        __value: *const ::std::ffi::c_char,
        __replace: ::std::ffi::c_int,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const ::std::ffi::c_char) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn clearenv() -> ::std::ffi::c_int;
}
extern "C" {
    pub fn mktemp(__template: *mut ::std::ffi::c_char) -> *mut ::std::ffi::c_char;
}
extern "C" {
    pub fn mkstemp(__template: *mut ::std::ffi::c_char) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn mkstemps(
        __template: *mut ::std::ffi::c_char,
        __suffixlen: ::std::ffi::c_int,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn mkdtemp(__template: *mut ::std::ffi::c_char) -> *mut ::std::ffi::c_char;
}
extern "C" {
    pub fn system(__command: *const ::std::ffi::c_char) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn realpath(
        __name: *const ::std::ffi::c_char,
        __resolved: *mut ::std::ffi::c_char,
    ) -> *mut ::std::ffi::c_char;
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::ffi::c_void,
        arg2: *const ::std::ffi::c_void,
    ) -> ::std::ffi::c_int,
>;
extern "C" {
    pub fn bsearch(
        __key: *const ::std::ffi::c_void,
        __base: *const ::std::ffi::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    ) -> *mut ::std::ffi::c_void;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::ffi::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    );
}
extern "C" {
    pub fn abs(__x: ::std::ffi::c_int) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn labs(__x: ::std::ffi::c_long) -> ::std::ffi::c_long;
}
extern "C" {
    pub fn llabs(__x: ::std::ffi::c_longlong) -> ::std::ffi::c_longlong;
}
extern "C" {
    pub fn div(__numer: ::std::ffi::c_int, __denom: ::std::ffi::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(__numer: ::std::ffi::c_long, __denom: ::std::ffi::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(__numer: ::std::ffi::c_longlong, __denom: ::std::ffi::c_longlong) -> lldiv_t;
}
extern "C" {
    pub fn ecvt(
        __value: f64,
        __ndigit: ::std::ffi::c_int,
        __decpt: *mut ::std::ffi::c_int,
        __sign: *mut ::std::ffi::c_int,
    ) -> *mut ::std::ffi::c_char;
}
extern "C" {
    pub fn fcvt(
        __value: f64,
        __ndigit: ::std::ffi::c_int,
        __decpt: *mut ::std::ffi::c_int,
        __sign: *mut ::std::ffi::c_int,
    ) -> *mut ::std::ffi::c_char;
}
extern "C" {
    pub fn gcvt(
        __value: f64,
        __ndigit: ::std::ffi::c_int,
        __buf: *mut ::std::ffi::c_char,
    ) -> *mut ::std::ffi::c_char;
}
extern "C" {
    pub fn qecvt(
        __value: u128,
        __ndigit: ::std::ffi::c_int,
        __decpt: *mut ::std::ffi::c_int,
        __sign: *mut ::std::ffi::c_int,
    ) -> *mut ::std::ffi::c_char;
}
extern "C" {
    pub fn qfcvt(
        __value: u128,
        __ndigit: ::std::ffi::c_int,
        __decpt: *mut ::std::ffi::c_int,
        __sign: *mut ::std::ffi::c_int,
    ) -> *mut ::std::ffi::c_char;
}
extern "C" {
    pub fn qgcvt(
        __value: u128,
        __ndigit: ::std::ffi::c_int,
        __buf: *mut ::std::ffi::c_char,
    ) -> *mut ::std::ffi::c_char;
}
extern "C" {
    pub fn ecvt_r(
        __value: f64,
        __ndigit: ::std::ffi::c_int,
        __decpt: *mut ::std::ffi::c_int,
        __sign: *mut ::std::ffi::c_int,
        __buf: *mut ::std::ffi::c_char,
        __len: usize,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn fcvt_r(
        __value: f64,
        __ndigit: ::std::ffi::c_int,
        __decpt: *mut ::std::ffi::c_int,
        __sign: *mut ::std::ffi::c_int,
        __buf: *mut ::std::ffi::c_char,
        __len: usize,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn qecvt_r(
        __value: u128,
        __ndigit: ::std::ffi::c_int,
        __decpt: *mut ::std::ffi::c_int,
        __sign: *mut ::std::ffi::c_int,
        __buf: *mut ::std::ffi::c_char,
        __len: usize,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn qfcvt_r(
        __value: u128,
        __ndigit: ::std::ffi::c_int,
        __decpt: *mut ::std::ffi::c_int,
        __sign: *mut ::std::ffi::c_int,
        __buf: *mut ::std::ffi::c_char,
        __len: usize,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn mblen(__s: *const ::std::ffi::c_char, __n: usize) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn mbtowc(
        __pwc: *mut wchar_t,
        __s: *const ::std::ffi::c_char,
        __n: usize,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn wctomb(__s: *mut ::std::ffi::c_char, __wchar: wchar_t) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn mbstowcs(__pwcs: *mut wchar_t, __s: *const ::std::ffi::c_char, __n: usize) -> usize;
}
extern "C" {
    pub fn wcstombs(__s: *mut ::std::ffi::c_char, __pwcs: *const wchar_t, __n: usize) -> usize;
}
extern "C" {
    pub fn rpmatch(__response: *const ::std::ffi::c_char) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn getsubopt(
        __optionp: *mut *mut ::std::ffi::c_char,
        __tokens: *const *mut ::std::ffi::c_char,
        __valuep: *mut *mut ::std::ffi::c_char,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::ffi::c_int) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn memcpy(
        __dest: *mut ::std::ffi::c_void,
        __src: *const ::std::ffi::c_void,
        __n: ::std::ffi::c_ulong,
    ) -> *mut ::std::ffi::c_void;
}
extern "C" {
    pub fn memmove(
        __dest: *mut ::std::ffi::c_void,
        __src: *const ::std::ffi::c_void,
        __n: ::std::ffi::c_ulong,
    ) -> *mut ::std::ffi::c_void;
}
extern "C" {
    pub fn memccpy(
        __dest: *mut ::std::ffi::c_void,
        __src: *const ::std::ffi::c_void,
        __c: ::std::ffi::c_int,
        __n: ::std::ffi::c_ulong,
    ) -> *mut ::std::ffi::c_void;
}
extern "C" {
    pub fn memset(
        __s: *mut ::std::ffi::c_void,
        __c: ::std::ffi::c_int,
        __n: ::std::ffi::c_ulong,
    ) -> *mut ::std::ffi::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ::std::ffi::c_void,
        __s2: *const ::std::ffi::c_void,
        __n: ::std::ffi::c_ulong,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn __memcmpeq(
        __s1: *const ::std::ffi::c_void,
        __s2: *const ::std::ffi::c_void,
        __n: usize,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn memchr(
        __s: *const ::std::ffi::c_void,
        __c: ::std::ffi::c_int,
        __n: ::std::ffi::c_ulong,
    ) -> *mut ::std::ffi::c_void;
}
extern "C" {
    pub fn strcpy(
        __dest: *mut ::std::ffi::c_char,
        __src: *const ::std::ffi::c_char,
    ) -> *mut ::std::ffi::c_char;
}
extern "C" {
    pub fn strncpy(
        __dest: *mut ::std::ffi::c_char,
        __src: *const ::std::ffi::c_char,
        __n: ::std::ffi::c_ulong,
    ) -> *mut ::std::ffi::c_char;
}
extern "C" {
    pub fn strcat(
        __dest: *mut ::std::ffi::c_char,
        __src: *const ::std::ffi::c_char,
    ) -> *mut ::std::ffi::c_char;
}
extern "C" {
    pub fn strncat(
        __dest: *mut ::std::ffi::c_char,
        __src: *const ::std::ffi::c_char,
        __n: ::std::ffi::c_ulong,
    ) -> *mut ::std::ffi::c_char;
}
extern "C" {
    pub fn strcmp(
        __s1: *const ::std::ffi::c_char,
        __s2: *const ::std::ffi::c_char,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ::std::ffi::c_char,
        __s2: *const ::std::ffi::c_char,
        __n: ::std::ffi::c_ulong,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn strcoll(
        __s1: *const ::std::ffi::c_char,
        __s2: *const ::std::ffi::c_char,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn strxfrm(
        __dest: *mut ::std::ffi::c_char,
        __src: *const ::std::ffi::c_char,
        __n: ::std::ffi::c_ulong,
    ) -> ::std::ffi::c_ulong;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::ffi::c_ushort,
    pub __ctype_tolower: *const ::std::ffi::c_int,
    pub __ctype_toupper: *const ::std::ffi::c_int,
    pub __names: [*const ::std::ffi::c_char; 13usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __locale_struct"][::std::mem::size_of::<__locale_struct>() - 232usize];
    ["Alignment of __locale_struct"][::std::mem::align_of::<__locale_struct>() - 8usize];
    ["Offset of field: __locale_struct::__locales"]
        [::std::mem::offset_of!(__locale_struct, __locales) - 0usize];
    ["Offset of field: __locale_struct::__ctype_b"]
        [::std::mem::offset_of!(__locale_struct, __ctype_b) - 104usize];
    ["Offset of field: __locale_struct::__ctype_tolower"]
        [::std::mem::offset_of!(__locale_struct, __ctype_tolower) - 112usize];
    ["Offset of field: __locale_struct::__ctype_toupper"]
        [::std::mem::offset_of!(__locale_struct, __ctype_toupper) - 120usize];
    ["Offset of field: __locale_struct::__names"]
        [::std::mem::offset_of!(__locale_struct, __names) - 128usize];
};
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn strcoll_l(
        __s1: *const ::std::ffi::c_char,
        __s2: *const ::std::ffi::c_char,
        __l: locale_t,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn strxfrm_l(
        __dest: *mut ::std::ffi::c_char,
        __src: *const ::std::ffi::c_char,
        __n: usize,
        __l: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn strdup(__s: *const ::std::ffi::c_char) -> *mut ::std::ffi::c_char;
}
extern "C" {
    pub fn strndup(
        __string: *const ::std::ffi::c_char,
        __n: ::std::ffi::c_ulong,
    ) -> *mut ::std::ffi::c_char;
}
extern "C" {
    pub fn strchr(
        __s: *const ::std::ffi::c_char,
        __c: ::std::ffi::c_int,
    ) -> *mut ::std::ffi::c_char;
}
extern "C" {
    pub fn strrchr(
        __s: *const ::std::ffi::c_char,
        __c: ::std::ffi::c_int,
    ) -> *mut ::std::ffi::c_char;
}
extern "C" {
    pub fn strchrnul(
        __s: *const ::std::ffi::c_char,
        __c: ::std::ffi::c_int,
    ) -> *mut ::std::ffi::c_char;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::std::ffi::c_char,
        __reject: *const ::std::ffi::c_char,
    ) -> ::std::ffi::c_ulong;
}
extern "C" {
    pub fn strspn(
        __s: *const ::std::ffi::c_char,
        __accept: *const ::std::ffi::c_char,
    ) -> ::std::ffi::c_ulong;
}
extern "C" {
    pub fn strpbrk(
        __s: *const ::std::ffi::c_char,
        __accept: *const ::std::ffi::c_char,
    ) -> *mut ::std::ffi::c_char;
}
extern "C" {
    pub fn strstr(
        __haystack: *const ::std::ffi::c_char,
        __needle: *const ::std::ffi::c_char,
    ) -> *mut ::std::ffi::c_char;
}
extern "C" {
    pub fn strtok(
        __s: *mut ::std::ffi::c_char,
        __delim: *const ::std::ffi::c_char,
    ) -> *mut ::std::ffi::c_char;
}
extern "C" {
    pub fn __strtok_r(
        __s: *mut ::std::ffi::c_char,
        __delim: *const ::std::ffi::c_char,
        __save_ptr: *mut *mut ::std::ffi::c_char,
    ) -> *mut ::std::ffi::c_char;
}
extern "C" {
    pub fn strtok_r(
        __s: *mut ::std::ffi::c_char,
        __delim: *const ::std::ffi::c_char,
        __save_ptr: *mut *mut ::std::ffi::c_char,
    ) -> *mut ::std::ffi::c_char;
}
extern "C" {
    pub fn strcasestr(
        __haystack: *const ::std::ffi::c_char,
        __needle: *const ::std::ffi::c_char,
    ) -> *mut ::std::ffi::c_char;
}
extern "C" {
    pub fn memmem(
        __haystack: *const ::std::ffi::c_void,
        __haystacklen: usize,
        __needle: *const ::std::ffi::c_void,
        __needlelen: usize,
    ) -> *mut ::std::ffi::c_void;
}
extern "C" {
    pub fn __mempcpy(
        __dest: *mut ::std::ffi::c_void,
        __src: *const ::std::ffi::c_void,
        __n: usize,
    ) -> *mut ::std::ffi::c_void;
}
extern "C" {
    pub fn mempcpy(
        __dest: *mut ::std::ffi::c_void,
        __src: *const ::std::ffi::c_void,
        __n: ::std::ffi::c_ulong,
    ) -> *mut ::std::ffi::c_void;
}
extern "C" {
    pub fn strlen(__s: *const ::std::ffi::c_char) -> ::std::ffi::c_ulong;
}
extern "C" {
    pub fn strnlen(__string: *const ::std::ffi::c_char, __maxlen: usize) -> usize;
}
extern "C" {
    pub fn strerror(__errnum: ::std::ffi::c_int) -> *mut ::std::ffi::c_char;
}
extern "C" {
    #[link_name = "\u{1}__xpg_strerror_r"]
    pub fn strerror_r(
        __errnum: ::std::ffi::c_int,
        __buf: *mut ::std::ffi::c_char,
        __buflen: usize,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn strerror_l(__errnum: ::std::ffi::c_int, __l: locale_t) -> *mut ::std::ffi::c_char;
}
extern "C" {
    pub fn bcmp(
        __s1: *const ::std::ffi::c_void,
        __s2: *const ::std::ffi::c_void,
        __n: ::std::ffi::c_ulong,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn bcopy(
        __src: *const ::std::ffi::c_void,
        __dest: *mut ::std::ffi::c_void,
        __n: ::std::ffi::c_ulong,
    );
}
extern "C" {
    pub fn bzero(__s: *mut ::std::ffi::c_void, __n: ::std::ffi::c_ulong);
}
extern "C" {
    pub fn index(__s: *const ::std::ffi::c_char, __c: ::std::ffi::c_int)
        -> *mut ::std::ffi::c_char;
}
extern "C" {
    pub fn rindex(
        __s: *const ::std::ffi::c_char,
        __c: ::std::ffi::c_int,
    ) -> *mut ::std::ffi::c_char;
}
extern "C" {
    pub fn ffs(__i: ::std::ffi::c_int) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn ffsl(__l: ::std::ffi::c_long) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn ffsll(__ll: ::std::ffi::c_longlong) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn strcasecmp(
        __s1: *const ::std::ffi::c_char,
        __s2: *const ::std::ffi::c_char,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn strncasecmp(
        __s1: *const ::std::ffi::c_char,
        __s2: *const ::std::ffi::c_char,
        __n: ::std::ffi::c_ulong,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn strcasecmp_l(
        __s1: *const ::std::ffi::c_char,
        __s2: *const ::std::ffi::c_char,
        __loc: locale_t,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn strncasecmp_l(
        __s1: *const ::std::ffi::c_char,
        __s2: *const ::std::ffi::c_char,
        __n: usize,
        __loc: locale_t,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn explicit_bzero(__s: *mut ::std::ffi::c_void, __n: usize);
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::ffi::c_char,
        __delim: *const ::std::ffi::c_char,
    ) -> *mut ::std::ffi::c_char;
}
extern "C" {
    pub fn strsignal(__sig: ::std::ffi::c_int) -> *mut ::std::ffi::c_char;
}
extern "C" {
    pub fn __stpcpy(
        __dest: *mut ::std::ffi::c_char,
        __src: *const ::std::ffi::c_char,
    ) -> *mut ::std::ffi::c_char;
}
extern "C" {
    pub fn stpcpy(
        __dest: *mut ::std::ffi::c_char,
        __src: *const ::std::ffi::c_char,
    ) -> *mut ::std::ffi::c_char;
}
extern "C" {
    pub fn __stpncpy(
        __dest: *mut ::std::ffi::c_char,
        __src: *const ::std::ffi::c_char,
        __n: usize,
    ) -> *mut ::std::ffi::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dest: *mut ::std::ffi::c_char,
        __src: *const ::std::ffi::c_char,
        __n: ::std::ffi::c_ulong,
    ) -> *mut ::std::ffi::c_char;
}
extern "C" {
    pub fn strlcpy(
        __dest: *mut ::std::ffi::c_char,
        __src: *const ::std::ffi::c_char,
        __n: ::std::ffi::c_ulong,
    ) -> ::std::ffi::c_ulong;
}
extern "C" {
    pub fn strlcat(
        __dest: *mut ::std::ffi::c_char,
        __src: *const ::std::ffi::c_char,
        __n: ::std::ffi::c_ulong,
    ) -> ::std::ffi::c_ulong;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stat {
    pub st_dev: __dev_t,
    pub st_ino: __ino_t,
    pub st_nlink: __nlink_t,
    pub st_mode: __mode_t,
    pub st_uid: __uid_t,
    pub st_gid: __gid_t,
    pub __pad0: ::std::ffi::c_int,
    pub st_rdev: __dev_t,
    pub st_size: __off_t,
    pub st_blksize: __blksize_t,
    pub st_blocks: __blkcnt_t,
    pub st_atim: timespec,
    pub st_mtim: timespec,
    pub st_ctim: timespec,
    pub __glibc_reserved: [__syscall_slong_t; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of stat"][::std::mem::size_of::<stat>() - 144usize];
    ["Alignment of stat"][::std::mem::align_of::<stat>() - 8usize];
    ["Offset of field: stat::st_dev"][::std::mem::offset_of!(stat, st_dev) - 0usize];
    ["Offset of field: stat::st_ino"][::std::mem::offset_of!(stat, st_ino) - 8usize];
    ["Offset of field: stat::st_nlink"][::std::mem::offset_of!(stat, st_nlink) - 16usize];
    ["Offset of field: stat::st_mode"][::std::mem::offset_of!(stat, st_mode) - 24usize];
    ["Offset of field: stat::st_uid"][::std::mem::offset_of!(stat, st_uid) - 28usize];
    ["Offset of field: stat::st_gid"][::std::mem::offset_of!(stat, st_gid) - 32usize];
    ["Offset of field: stat::__pad0"][::std::mem::offset_of!(stat, __pad0) - 36usize];
    ["Offset of field: stat::st_rdev"][::std::mem::offset_of!(stat, st_rdev) - 40usize];
    ["Offset of field: stat::st_size"][::std::mem::offset_of!(stat, st_size) - 48usize];
    ["Offset of field: stat::st_blksize"][::std::mem::offset_of!(stat, st_blksize) - 56usize];
    ["Offset of field: stat::st_blocks"][::std::mem::offset_of!(stat, st_blocks) - 64usize];
    ["Offset of field: stat::st_atim"][::std::mem::offset_of!(stat, st_atim) - 72usize];
    ["Offset of field: stat::st_mtim"][::std::mem::offset_of!(stat, st_mtim) - 88usize];
    ["Offset of field: stat::st_ctim"][::std::mem::offset_of!(stat, st_ctim) - 104usize];
    ["Offset of field: stat::__glibc_reserved"]
        [::std::mem::offset_of!(stat, __glibc_reserved) - 120usize];
};
extern "C" {
    pub fn stat(__file: *const ::std::ffi::c_char, __buf: *mut stat) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn fstat(__fd: ::std::ffi::c_int, __buf: *mut stat) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn fstatat(
        __fd: ::std::ffi::c_int,
        __file: *const ::std::ffi::c_char,
        __buf: *mut stat,
        __flag: ::std::ffi::c_int,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn lstat(__file: *const ::std::ffi::c_char, __buf: *mut stat) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn chmod(__file: *const ::std::ffi::c_char, __mode: __mode_t) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn lchmod(__file: *const ::std::ffi::c_char, __mode: __mode_t) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn fchmod(__fd: ::std::ffi::c_int, __mode: __mode_t) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn fchmodat(
        __fd: ::std::ffi::c_int,
        __file: *const ::std::ffi::c_char,
        __mode: __mode_t,
        __flag: ::std::ffi::c_int,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn umask(__mask: __mode_t) -> __mode_t;
}
extern "C" {
    pub fn mkdir(__path: *const ::std::ffi::c_char, __mode: __mode_t) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn mkdirat(
        __fd: ::std::ffi::c_int,
        __path: *const ::std::ffi::c_char,
        __mode: __mode_t,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn mknod(
        __path: *const ::std::ffi::c_char,
        __mode: __mode_t,
        __dev: __dev_t,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn mknodat(
        __fd: ::std::ffi::c_int,
        __path: *const ::std::ffi::c_char,
        __mode: __mode_t,
        __dev: __dev_t,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn mkfifo(__path: *const ::std::ffi::c_char, __mode: __mode_t) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn mkfifoat(
        __fd: ::std::ffi::c_int,
        __path: *const ::std::ffi::c_char,
        __mode: __mode_t,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn utimensat(
        __fd: ::std::ffi::c_int,
        __path: *const ::std::ffi::c_char,
        __times: *const timespec,
        __flags: ::std::ffi::c_int,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn futimens(__fd: ::std::ffi::c_int, __times: *const timespec) -> ::std::ffi::c_int;
}
pub type geoipv6_t = in6_addr;
#[repr(C)]
// #[derive(Debug, Copy, Clone)]
pub struct GeoIPTag {
    pub cache: *mut ::std::ffi::c_uchar,
    pub index_cache: *mut ::std::ffi::c_uchar,
    pub databaseSegments: *mut ::std::ffi::c_uint,
    pub databaseType: ::std::ffi::c_char,
    pub mtime: time_t,
    pub flags: ::std::ffi::c_int,
    pub size: off_t,
    pub record_length: ::std::ffi::c_char,
    pub charset: ::std::ffi::c_int,
    pub record_iter: ::std::ffi::c_int,
    pub netmask: ::std::ffi::c_int,
    pub last_mtime_check: time_t,
    pub dyn_seg_size: off_t,
    pub ext_flags: ::std::ffi::c_uint,
    pub GeoIPDatabase: Option<File>,
    pub file_path: Option<String>,
}
pub type GeoIP = GeoIPTag;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GeoIPLookup {
    pub netmask: ::std::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of GeoIPLookup"][::std::mem::size_of::<GeoIPLookup>() - 4usize];
    ["Alignment of GeoIPLookup"][::std::mem::align_of::<GeoIPLookup>() - 4usize];
    ["Offset of field: GeoIPLookup::netmask"]
        [::std::mem::offset_of!(GeoIPLookup, netmask) - 0usize];
};
pub const GeoIPExtFlags_GEOIP_TEREDO_BIT: GeoIPExtFlags = 0;
pub type GeoIPExtFlags = ::std::ffi::c_uint;
pub const GeoIPCharset_GEOIP_CHARSET_ISO_8859_1: GeoIPCharset = 0;
pub const GeoIPCharset_GEOIP_CHARSET_UTF8: GeoIPCharset = 1;
pub type GeoIPCharset = ::std::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GeoIPRegionTag {
    pub country_code: [::std::ffi::c_char; 3usize],
    pub region: [::std::ffi::c_char; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of GeoIPRegionTag"][::std::mem::size_of::<GeoIPRegionTag>() - 6usize];
    ["Alignment of GeoIPRegionTag"][::std::mem::align_of::<GeoIPRegionTag>() - 1usize];
    ["Offset of field: GeoIPRegionTag::country_code"]
        [::std::mem::offset_of!(GeoIPRegionTag, country_code) - 0usize];
    ["Offset of field: GeoIPRegionTag::region"]
        [::std::mem::offset_of!(GeoIPRegionTag, region) - 3usize];
};
pub type GeoIPRegion = GeoIPRegionTag;
pub const GeoIPOptions_GEOIP_STANDARD: GeoIPOptions = 0;
pub const GeoIPOptions_GEOIP_MEMORY_CACHE: GeoIPOptions = 1;
pub const GeoIPOptions_GEOIP_CHECK_CACHE: GeoIPOptions = 2;
pub const GeoIPOptions_GEOIP_INDEX_CACHE: GeoIPOptions = 4;
pub const GeoIPOptions_GEOIP_MMAP_CACHE: GeoIPOptions = 8;
pub const GeoIPOptions_GEOIP_SILENCE: GeoIPOptions = 16;
pub type GeoIPOptions = ::std::ffi::c_uint;
pub const GeoIPDBTypes_GEOIP_COUNTRY_EDITION: GeoIPDBTypes = 1;
pub const GeoIPDBTypes_GEOIP_REGION_EDITION_REV0: GeoIPDBTypes = 7;
pub const GeoIPDBTypes_GEOIP_CITY_EDITION_REV0: GeoIPDBTypes = 6;
pub const GeoIPDBTypes_GEOIP_ORG_EDITION: GeoIPDBTypes = 5;
pub const GeoIPDBTypes_GEOIP_ISP_EDITION: GeoIPDBTypes = 4;
pub const GeoIPDBTypes_GEOIP_CITY_EDITION_REV1: GeoIPDBTypes = 2;
pub const GeoIPDBTypes_GEOIP_REGION_EDITION_REV1: GeoIPDBTypes = 3;
pub const GeoIPDBTypes_GEOIP_PROXY_EDITION: GeoIPDBTypes = 8;
pub const GeoIPDBTypes_GEOIP_ASNUM_EDITION: GeoIPDBTypes = 9;
pub const GeoIPDBTypes_GEOIP_NETSPEED_EDITION: GeoIPDBTypes = 10;
pub const GeoIPDBTypes_GEOIP_DOMAIN_EDITION: GeoIPDBTypes = 11;
pub const GeoIPDBTypes_GEOIP_COUNTRY_EDITION_V6: GeoIPDBTypes = 12;
pub const GeoIPDBTypes_GEOIP_LOCATIONA_EDITION: GeoIPDBTypes = 13;
pub const GeoIPDBTypes_GEOIP_ACCURACYRADIUS_EDITION: GeoIPDBTypes = 14;
pub const GeoIPDBTypes_GEOIP_CITYCONFIDENCE_EDITION: GeoIPDBTypes = 15;
pub const GeoIPDBTypes_GEOIP_CITYCONFIDENCEDIST_EDITION: GeoIPDBTypes = 16;
pub const GeoIPDBTypes_GEOIP_LARGE_COUNTRY_EDITION: GeoIPDBTypes = 17;
pub const GeoIPDBTypes_GEOIP_LARGE_COUNTRY_EDITION_V6: GeoIPDBTypes = 18;
pub const GeoIPDBTypes_GEOIP_CITYCONFIDENCEDIST_ISP_ORG_EDITION: GeoIPDBTypes = 19;
pub const GeoIPDBTypes_GEOIP_CCM_COUNTRY_EDITION: GeoIPDBTypes = 20;
pub const GeoIPDBTypes_GEOIP_ASNUM_EDITION_V6: GeoIPDBTypes = 21;
pub const GeoIPDBTypes_GEOIP_ISP_EDITION_V6: GeoIPDBTypes = 22;
pub const GeoIPDBTypes_GEOIP_ORG_EDITION_V6: GeoIPDBTypes = 23;
pub const GeoIPDBTypes_GEOIP_DOMAIN_EDITION_V6: GeoIPDBTypes = 24;
pub const GeoIPDBTypes_GEOIP_LOCATIONA_EDITION_V6: GeoIPDBTypes = 25;
pub const GeoIPDBTypes_GEOIP_REGISTRAR_EDITION: GeoIPDBTypes = 26;
pub const GeoIPDBTypes_GEOIP_REGISTRAR_EDITION_V6: GeoIPDBTypes = 27;
pub const GeoIPDBTypes_GEOIP_USERTYPE_EDITION: GeoIPDBTypes = 28;
pub const GeoIPDBTypes_GEOIP_USERTYPE_EDITION_V6: GeoIPDBTypes = 29;
pub const GeoIPDBTypes_GEOIP_CITY_EDITION_REV1_V6: GeoIPDBTypes = 30;
pub const GeoIPDBTypes_GEOIP_CITY_EDITION_REV0_V6: GeoIPDBTypes = 31;
pub const GeoIPDBTypes_GEOIP_NETSPEED_EDITION_REV1: GeoIPDBTypes = 32;
pub const GeoIPDBTypes_GEOIP_NETSPEED_EDITION_REV1_V6: GeoIPDBTypes = 33;
pub const GeoIPDBTypes_GEOIP_COUNTRYCONF_EDITION: GeoIPDBTypes = 34;
pub const GeoIPDBTypes_GEOIP_CITYCONF_EDITION: GeoIPDBTypes = 35;
pub const GeoIPDBTypes_GEOIP_REGIONCONF_EDITION: GeoIPDBTypes = 36;
pub const GeoIPDBTypes_GEOIP_POSTALCONF_EDITION: GeoIPDBTypes = 37;
pub const GeoIPDBTypes_GEOIP_ACCURACYRADIUS_EDITION_V6: GeoIPDBTypes = 38;
pub type GeoIPDBTypes = ::std::ffi::c_uint;
pub const GeoIPProxyTypes_GEOIP_ANON_PROXY: GeoIPProxyTypes = 1;
pub const GeoIPProxyTypes_GEOIP_HTTP_X_FORWARDED_FOR_PROXY: GeoIPProxyTypes = 2;
pub const GeoIPProxyTypes_GEOIP_HTTP_CLIENT_IP_PROXY: GeoIPProxyTypes = 3;
pub type GeoIPProxyTypes = ::std::ffi::c_uint;
pub const GeoIPNetspeedValues_GEOIP_UNKNOWN_SPEED: GeoIPNetspeedValues = 0;
pub const GeoIPNetspeedValues_GEOIP_DIALUP_SPEED: GeoIPNetspeedValues = 1;
pub const GeoIPNetspeedValues_GEOIP_CABLEDSL_SPEED: GeoIPNetspeedValues = 2;
pub const GeoIPNetspeedValues_GEOIP_CORPORATE_SPEED: GeoIPNetspeedValues = 3;
pub type GeoIPNetspeedValues = ::std::ffi::c_uint;
extern "C" {
    pub static mut GeoIPDBFileName: *mut *mut ::std::ffi::c_char;
}
extern "C" {
    pub static mut GeoIPDBDescription: [*const ::std::ffi::c_char; 39usize];
}
extern "C" {
    pub static mut GeoIPCountryDBFileName: *const ::std::ffi::c_char;
}
extern "C" {
    pub static mut GeoIPRegionDBFileName: *const ::std::ffi::c_char;
}
extern "C" {
    pub static mut GeoIPCityDBFileName: *const ::std::ffi::c_char;
}
extern "C" {
    pub static mut GeoIPOrgDBFileName: *const ::std::ffi::c_char;
}
extern "C" {
    pub static mut GeoIPISPDBFileName: *const ::std::ffi::c_char;
}
extern "C" {
    pub static mut GeoIPLocationADBFileName: *const ::std::ffi::c_char;
}
extern "C" {
    pub static mut GeoIPAccuracyRadiusFileName: *const ::std::ffi::c_char;
}
extern "C" {
    pub static mut GeoIPCityConfidenceFileName: *const ::std::ffi::c_char;
}
extern "C" {
    pub static mut GeoIP_custom_directory: *mut ::std::ffi::c_char;
}
extern "C" {
    pub static mut GeoIP_country_code: [[::std::ffi::c_char; 3usize]; 256usize];
}
extern "C" {
    pub static mut GeoIP_country_code3: [[::std::ffi::c_char; 4usize]; 256usize];
}
extern "C" {
    pub static mut GeoIP_country_name: [*const ::std::ffi::c_char; 256usize];
}
extern "C" {
    pub static mut GeoIP_utf8_country_name: [*const ::std::ffi::c_char; 256usize];
}
extern "C" {
    pub static mut GeoIP_country_continent: [[::std::ffi::c_char; 3usize]; 256usize];
}
extern "C" {
    pub fn GeoIP_setup_custom_directory(dir: *mut ::std::ffi::c_char);
}
extern "C" {
    pub fn GeoIP_open_type(type_: ::std::ffi::c_int, flags: ::std::ffi::c_int) -> *mut GeoIP;
}
extern "C" {
    pub fn GeoIP_new(flags: ::std::ffi::c_int) -> *mut GeoIP;
}
#[no_mangle]
extern "C" fn GeoIP_open(
    filename: *const ::std::ffi::c_char,
    flags: ::std::ffi::c_int,
) -> *mut GeoIP {
    println!("Rust calling GeoIP_open");
    if filename.is_null() {
        return ptr::null_mut();
    }

    let filename_cstr = unsafe { CStr::from_ptr(filename) };

    let filename_str = match filename_cstr.to_str() {
        Ok(s) => s,
        Err(_) => return ptr::null_mut(),
    };

    let mut file = match File::open(filename_str) {
        Ok(f) => f,
        Err(_) => return ptr::null_mut(),
    };

    let file_metadata = match File::metadata(&file) {
        Ok(m) => m,
        Err(_) => return ptr::null_mut(),
    };

    let file_size = file_metadata.len();

    let mut gi = GeoIP {
        cache: ptr::null_mut(),
        index_cache: ptr::null_mut(),
        databaseSegments: ptr::null_mut(),
        databaseType: 0,
        mtime: file_metadata.st_mtime(),
        flags: 1,
        size: file_size as i64,
        record_length: 0,
        charset: 0,
        record_iter: 0,
        netmask: 0,
        last_mtime_check: 0,
        dyn_seg_size: 0,
        ext_flags: 0,
        GeoIPDatabase: None,
        file_path: Some(filename_str.to_string()),
    };

    println!(
        "Rust code: print GeoIPTag First file field: {file:#?} and mtime {} at addr: {:#?}",
        gi.mtime,
        addr_of!(gi.mtime)
    );

    if (flags as u32 & (GeoIPOptions_GEOIP_MEMORY_CACHE | GeoIPOptions_GEOIP_MMAP_CACHE)) != 0 {
        if flags as u32 & GeoIPOptions_GEOIP_MMAP_CACHE != 0 {
            #[cfg(unix)]
            {
                let mut cache = match unsafe { MmapMut::map_mut(&file) } {
                    Ok(c) => c,
                    Err(_) => return ptr::null_mut(),
                };
                gi.cache = cache.as_mut_ptr();
            }
        } else {
            let mut cache = vec![0u8; file_size as usize];
            if let Err(_) = file.read_exact(&mut cache) {
                return ptr::null_mut();
            }
            gi.cache = cache.as_mut_ptr();
        }
    } else {
        if flags as u32 & GeoIPOptions_GEOIP_CHECK_CACHE != 0 {
            let file_metadata = match File::metadata(&file) {
                Ok(m) => m,
                Err(_) => return ptr::null_mut(),
            };
            gi.mtime = file_metadata.st_mtime();
        }
        gi.cache = ptr::null_mut();
    }

    gi.flags = flags;
    gi.charset = GeoIPCharset_GEOIP_CHARSET_ISO_8859_1 as i32;
    gi.ext_flags = 1u32 << GeoIPExtFlags_GEOIP_TEREDO_BIT;

    println!("Rust code: ext flags is: {}", gi.ext_flags);

    gi.GeoIPDatabase = Some(file);

    ptr::from_mut(&mut gi)
}

const STRUCTURE_INFO_MAX_SIZE: usize = 20;
const STATE_BEGIN_REV0: usize = 16700000;
const STATE_BEGIN_REV1: usize = 16000000;

fn pread(file: &mut File, buf: &mut [u8], count: u64, offset: u64) -> io::Result<usize> {
    if let Ok(seek_offset) = file.seek(SeekFrom::Start(offset)) {
        if seek_offset == offset {
            return file.take(count).read(buf);
        }
    }

    Err(io::Error::new(io::ErrorKind::Other, "Seek failed"))
}

// fn _setup_segment(gi: &mut GeoIP) {
//     let mut offset: off_t = gi.size - 3;
//     gi.GeoIPDatabase = None;
//     gi.databaseType = GeoIPDBTypes_GEOIP_COUNTRY_EDITION as i8;
//     gi.record_length = STANDARD_RECORD_LENGTH as i8;
//     let mut delim: [u8; 3] = [0; 3];
//
//     for _ in 0..STRUCTURE_INFO_MAX_SIZE {
//         // if (pread(gi.GeoIPDatabase, delim, 3, offset).unwrap_or_else != 3) {}
//         match pread(
//             gi.GeoIPDatabase.as_mut().unwrap(),
//             &mut delim,
//             3,
//             offset as u64,
//         ) {
//             Ok(byte_read) => {
//                 if byte_read != 3 {
//                     return;
//                 }
//             }
//             Err(_) => return,
//         }
//         offset += 3;
//         if delim[0] == 255 && delim[1] == 255 && delim[2] == 255 {
//             match pread(
//                 gi.GeoIPDatabase.as_mut().unwrap(),
//                 &mut [gi.databaseType as u8],
//                 1,
//                 offset as u64,
//             ) {
//                 Ok(byte_read) => {
//                     if byte_read != 1 {
//                         return;
//                     }
//                 }
//                 Err(_) => return,
//             }
//
//             offset += 1;
//             if gi.databaseType >= 106 {
//                 gi.databaseType -= 105;
//             }
//
//             if gi.databaseType == GeoIPDBTypes_GEOIP_REGION_EDITION_REV0 as i8 {
//                 gi.databaseSegments = Some(vec![STATE_BEGIN_REV0 as u32]);
//             } else if gi.databaseType == GeoIPDBTypes_GEOIP_REGION_EDITION_REV1 as i8 {
//                 gi.databaseSegments = Some(vec![STATE_BEGIN_REV1 as u32])
//             } else if gi.databaseType == GeoIPDBTypes_GEOIP_CITY_EDITION_REV0
//                 || gi.databaseType == GeoIPDBTypes_GEOIP_CITY_EDITION_REV1
//                 || gi.databaseType == GeoIPDBTypes_GEOIP_ORG_EDITION
//                 || gi.databaseType == GeoIPDBTypes_GEOIP_ORG_EDITION_V6
//                 || gi.databaseType == GeoIPDBTypes_GEOIP_DOMAIN_EDITION
//                 || gi.databaseType == GeoIPDBTypes_GEOIP_DOMAIN_EDITION_V6
//                 || gi.databaseType == GeoIPDBTypes_GEOIP_ISP_EDITION
//                 || gi.databaseType == GeoIPDBTypes_GEOIP_ISP_EDITION_V6
//                 || gi.databaseType == GeoIPDBTypes_GEOIP_REGISTRAR_EDITION
//                 || gi.databaseType == GeoIPDBTypes_GEOIP_REGISTRAR_EDITION_V6
//                 || gi.databaseType == GeoIPDBTypes_GEOIP_USERTYPE_EDITION
//                 || gi.databaseType == GeoIPDBTypes_GEOIP_USERTYPE_EDITION_V6
//                 || gi.databaseType == GeoIPDBTypes_GEOIP_ASNUM_EDITION
//                 || gi.databaseType == GeoIPDBTypes_GEOIP_ASNUM_EDITION_V6
//                 || gi.databaseType == GeoIPDBTypes_GEOIP_NETSPEED_EDITION_REV1
//                 || gi.databaseType == GeoIPDBTypes_GEOIP_NETSPEED_EDITION_REV1_V6
//                 || gi.databaseType == GeoIPDBTypes_GEOIP_LOCATIONA_EDITION
//                 || gi.databaseType == GeoIPDBTypes_GEOIP_ACCURACYRADIUS_EDITION
//                 || gi.databaseType == GeoIPDBTypes_GEOIP_ACCURACYRADIUS_EDITION_V6
//                 || gi.databaseType == GeoIPDBTypes_GEOIP_CITY_EDITION_REV0_V6
//                 || gi.databaseType == GeoIPDBTypes_GEOIP_CITY_EDITION_REV1_V6
//                 || gi.databaseType == GeoIPDBTypes_GEOIP_CITYCONF_EDITION
//                 || gi.databaseType == GeoIPDBTypes_GEOIP_COUNTRYCONF_EDITION
//                 || gi.databaseType == GeoIPDBTypes_GEOIP_REGIONCONF_EDITION
//                 || gi.databaseType == GeoIPDBTypes_GEOIP_POSTALCONF_EDITION
//             {
//                 gi.databaseSegments = Some(vec![0]);
//
//                 pread(file, buf, count, offset)
//             }
//         }
//     }
// }

extern "C" {
    pub fn GeoIP_db_avail(type_: ::std::ffi::c_int) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn GeoIP_delete(gi: *mut GeoIP);
}
extern "C" {
    pub fn GeoIP_country_code_by_addr_gl(
        gi: *mut GeoIP,
        addr: *const ::std::ffi::c_char,
        gl: *mut GeoIPLookup,
    ) -> *const ::std::ffi::c_char;
}
extern "C" {
    pub fn GeoIP_country_code_by_name_gl(
        gi: *mut GeoIP,
        host: *const ::std::ffi::c_char,
        gl: *mut GeoIPLookup,
    ) -> *const ::std::ffi::c_char;
}
extern "C" {
    pub fn GeoIP_country_code3_by_addr_gl(
        gi: *mut GeoIP,
        addr: *const ::std::ffi::c_char,
        gl: *mut GeoIPLookup,
    ) -> *const ::std::ffi::c_char;
}
extern "C" {
    pub fn GeoIP_country_code3_by_name_gl(
        gi: *mut GeoIP,
        host: *const ::std::ffi::c_char,
        gl: *mut GeoIPLookup,
    ) -> *const ::std::ffi::c_char;
}
extern "C" {
    pub fn GeoIP_country_name_by_addr_gl(
        gi: *mut GeoIP,
        addr: *const ::std::ffi::c_char,
        gl: *mut GeoIPLookup,
    ) -> *const ::std::ffi::c_char;
}
extern "C" {
    pub fn GeoIP_country_name_by_name_gl(
        gi: *mut GeoIP,
        host: *const ::std::ffi::c_char,
        gl: *mut GeoIPLookup,
    ) -> *const ::std::ffi::c_char;
}
extern "C" {
    pub fn GeoIP_country_name_by_ipnum_gl(
        gi: *mut GeoIP,
        ipnum: ::std::ffi::c_ulong,
        gl: *mut GeoIPLookup,
    ) -> *const ::std::ffi::c_char;
}
extern "C" {
    pub fn GeoIP_country_code_by_ipnum_gl(
        gi: *mut GeoIP,
        ipnum: ::std::ffi::c_ulong,
        gl: *mut GeoIPLookup,
    ) -> *const ::std::ffi::c_char;
}
extern "C" {
    pub fn GeoIP_country_code3_by_ipnum_gl(
        gi: *mut GeoIP,
        ipnum: ::std::ffi::c_ulong,
        gl: *mut GeoIPLookup,
    ) -> *const ::std::ffi::c_char;
}
extern "C" {
    pub fn GeoIP_country_name_by_ipnum_v6_gl(
        gi: *mut GeoIP,
        ipnum: geoipv6_t,
        gl: *mut GeoIPLookup,
    ) -> *const ::std::ffi::c_char;
}
extern "C" {
    pub fn GeoIP_country_code_by_ipnum_v6_gl(
        gi: *mut GeoIP,
        ipnum: geoipv6_t,
        gl: *mut GeoIPLookup,
    ) -> *const ::std::ffi::c_char;
}
extern "C" {
    pub fn GeoIP_country_code3_by_ipnum_v6_gl(
        gi: *mut GeoIP,
        ipnum: geoipv6_t,
        gl: *mut GeoIPLookup,
    ) -> *const ::std::ffi::c_char;
}
extern "C" {
    pub fn GeoIP_country_code_by_addr_v6_gl(
        gi: *mut GeoIP,
        addr: *const ::std::ffi::c_char,
        gl: *mut GeoIPLookup,
    ) -> *const ::std::ffi::c_char;
}
extern "C" {
    pub fn GeoIP_country_code_by_name_v6_gl(
        gi: *mut GeoIP,
        host: *const ::std::ffi::c_char,
        gl: *mut GeoIPLookup,
    ) -> *const ::std::ffi::c_char;
}
extern "C" {
    pub fn GeoIP_country_code3_by_addr_v6_gl(
        gi: *mut GeoIP,
        addr: *const ::std::ffi::c_char,
        gl: *mut GeoIPLookup,
    ) -> *const ::std::ffi::c_char;
}
extern "C" {
    pub fn GeoIP_country_code3_by_name_v6_gl(
        gi: *mut GeoIP,
        host: *const ::std::ffi::c_char,
        gl: *mut GeoIPLookup,
    ) -> *const ::std::ffi::c_char;
}
extern "C" {
    pub fn GeoIP_country_name_by_addr_v6_gl(
        gi: *mut GeoIP,
        addr: *const ::std::ffi::c_char,
        gl: *mut GeoIPLookup,
    ) -> *const ::std::ffi::c_char;
}
extern "C" {
    pub fn GeoIP_country_name_by_name_v6_gl(
        gi: *mut GeoIP,
        host: *const ::std::ffi::c_char,
        gl: *mut GeoIPLookup,
    ) -> *const ::std::ffi::c_char;
}
extern "C" {
    pub fn GeoIP_id_by_addr_gl(
        gi: *mut GeoIP,
        addr: *const ::std::ffi::c_char,
        gl: *mut GeoIPLookup,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn GeoIP_id_by_name_gl(
        gi: *mut GeoIP,
        host: *const ::std::ffi::c_char,
        gl: *mut GeoIPLookup,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn GeoIP_id_by_ipnum_gl(
        gi: *mut GeoIP,
        ipnum: ::std::ffi::c_ulong,
        gl: *mut GeoIPLookup,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn GeoIP_id_by_addr_v6_gl(
        gi: *mut GeoIP,
        addr: *const ::std::ffi::c_char,
        gl: *mut GeoIPLookup,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn GeoIP_id_by_name_v6_gl(
        gi: *mut GeoIP,
        host: *const ::std::ffi::c_char,
        gl: *mut GeoIPLookup,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn GeoIP_id_by_ipnum_v6_gl(
        gi: *mut GeoIP,
        ipnum: geoipv6_t,
        gl: *mut GeoIPLookup,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn GeoIP_region_by_addr_gl(
        gi: *mut GeoIP,
        addr: *const ::std::ffi::c_char,
        gl: *mut GeoIPLookup,
    ) -> *mut GeoIPRegion;
}
extern "C" {
    pub fn GeoIP_region_by_name_gl(
        gi: *mut GeoIP,
        host: *const ::std::ffi::c_char,
        gl: *mut GeoIPLookup,
    ) -> *mut GeoIPRegion;
}
extern "C" {
    pub fn GeoIP_region_by_ipnum_gl(
        gi: *mut GeoIP,
        ipnum: ::std::ffi::c_ulong,
        gl: *mut GeoIPLookup,
    ) -> *mut GeoIPRegion;
}
extern "C" {
    pub fn GeoIP_region_by_addr_v6_gl(
        gi: *mut GeoIP,
        addr: *const ::std::ffi::c_char,
        gl: *mut GeoIPLookup,
    ) -> *mut GeoIPRegion;
}
extern "C" {
    pub fn GeoIP_region_by_name_v6_gl(
        gi: *mut GeoIP,
        host: *const ::std::ffi::c_char,
        gl: *mut GeoIPLookup,
    ) -> *mut GeoIPRegion;
}
extern "C" {
    pub fn GeoIP_region_by_ipnum_v6_gl(
        gi: *mut GeoIP,
        ipnum: geoipv6_t,
        gl: *mut GeoIPLookup,
    ) -> *mut GeoIPRegion;
}
extern "C" {
    pub fn GeoIPRegion_delete(gir: *mut GeoIPRegion);
}
extern "C" {
    pub fn GeoIP_assign_region_by_inetaddr_gl(
        gi: *mut GeoIP,
        inetaddr: ::std::ffi::c_ulong,
        gir: *mut GeoIPRegion,
        gl: *mut GeoIPLookup,
    );
}
extern "C" {
    pub fn GeoIP_assign_region_by_inetaddr_v6_gl(
        gi: *mut GeoIP,
        inetaddr: geoipv6_t,
        gir: *mut GeoIPRegion,
        gl: *mut GeoIPLookup,
    );
}
extern "C" {
    pub fn GeoIP_name_by_ipnum_gl(
        gi: *mut GeoIP,
        ipnum: ::std::ffi::c_ulong,
        gl: *mut GeoIPLookup,
    ) -> *mut ::std::ffi::c_char;
}
extern "C" {
    pub fn GeoIP_name_by_addr_gl(
        gi: *mut GeoIP,
        addr: *const ::std::ffi::c_char,
        gl: *mut GeoIPLookup,
    ) -> *mut ::std::ffi::c_char;
}
extern "C" {
    pub fn GeoIP_name_by_name_gl(
        gi: *mut GeoIP,
        host: *const ::std::ffi::c_char,
        gl: *mut GeoIPLookup,
    ) -> *mut ::std::ffi::c_char;
}
extern "C" {
    pub fn GeoIP_name_by_ipnum_v6_gl(
        gi: *mut GeoIP,
        ipnum: geoipv6_t,
        gl: *mut GeoIPLookup,
    ) -> *mut ::std::ffi::c_char;
}
extern "C" {
    pub fn GeoIP_name_by_addr_v6_gl(
        gi: *mut GeoIP,
        addr: *const ::std::ffi::c_char,
        gl: *mut GeoIPLookup,
    ) -> *mut ::std::ffi::c_char;
}
extern "C" {
    pub fn GeoIP_name_by_name_v6_gl(
        gi: *mut GeoIP,
        name: *const ::std::ffi::c_char,
        gl: *mut GeoIPLookup,
    ) -> *mut ::std::ffi::c_char;
}
extern "C" {
    pub fn GeoIP_string_delete(ptr: *mut ::std::ffi::c_char);
}
extern "C" {
    #[doc = " return two letter country code"]
    pub fn GeoIP_code_by_id(id: ::std::ffi::c_int) -> *const ::std::ffi::c_char;
}
extern "C" {
    #[doc = " return three letter country code"]
    pub fn GeoIP_code3_by_id(id: ::std::ffi::c_int) -> *const ::std::ffi::c_char;
}
extern "C" {
    #[doc = " return full name of country in utf8 or iso-8859-1"]
    pub fn GeoIP_country_name_by_id(
        gi: *mut GeoIP,
        id: ::std::ffi::c_int,
    ) -> *const ::std::ffi::c_char;
}
extern "C" {
    #[doc = " return full name of country"]
    pub fn GeoIP_name_by_id(id: ::std::ffi::c_int) -> *const ::std::ffi::c_char;
}
extern "C" {
    #[doc = " return continent of country"]
    pub fn GeoIP_continent_by_id(id: ::std::ffi::c_int) -> *const ::std::ffi::c_char;
}
extern "C" {
    #[doc = " return id by country code"]
    pub fn GeoIP_id_by_code(country: *const ::std::ffi::c_char) -> ::std::ffi::c_int;
}
extern "C" {
    #[doc = " return return number of known countries"]
    pub fn GeoIP_num_countries() -> ::std::ffi::c_uint;
}

#[no_mangle]
pub extern "C" fn GeoIP_database_edition(gi: *const GeoIP) -> __u_char {
    if gi.is_null() {
        return 0;
    }

    let geo_ip = unsafe { &*gi };

    geo_ip.databaseType as __u_char
}

extern "C" {
    pub fn GeoIP_charset(gi: *mut GeoIP) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn GeoIP_set_charset(gi: *mut GeoIP, charset: ::std::ffi::c_int) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn GeoIP_enable_teredo(gi: *mut GeoIP, true_false: ::std::ffi::c_int) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn GeoIP_teredo(gi: *mut GeoIP) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn GeoIP_range_by_ip_gl(
        gi: *mut GeoIP,
        addr: *const ::std::ffi::c_char,
        gl: *mut GeoIPLookup,
    ) -> *mut *mut ::std::ffi::c_char;
}
extern "C" {
    pub fn GeoIP_range_by_ip_delete(ptr: *mut *mut ::std::ffi::c_char);
}
extern "C" {
    pub fn GeoIP_region_name_by_code(
        country_code: *const ::std::ffi::c_char,
        region_code: *const ::std::ffi::c_char,
    ) -> *const ::std::ffi::c_char;
}
extern "C" {
    pub fn GeoIP_time_zone_by_country_and_region(
        country_code: *const ::std::ffi::c_char,
        region_code: *const ::std::ffi::c_char,
    ) -> *const ::std::ffi::c_char;
}
extern "C" {
    pub fn GeoIP_addr_to_num(addr: *const ::std::ffi::c_char) -> ::std::ffi::c_ulong;
}
extern "C" {
    pub fn GeoIP_num_to_addr(ipnum: ::std::ffi::c_ulong) -> *mut ::std::ffi::c_char;
}
extern "C" {
    pub fn _GeoIP_iso_8859_1__utf8(iso: *const ::std::ffi::c_char) -> *mut ::std::ffi::c_char;
}
extern "C" {
    pub fn GeoIP_cleanup() -> ::std::ffi::c_int;
}
extern "C" {
    pub fn GeoIP_lib_version() -> *const ::std::ffi::c_char;
}
extern "C" {
    pub fn GeoIP_country_code_by_addr(
        gi: *mut GeoIP,
        addr: *const ::std::ffi::c_char,
    ) -> *const ::std::ffi::c_char;
}
extern "C" {
    pub fn GeoIP_country_code_by_name(
        gi: *mut GeoIP,
        host: *const ::std::ffi::c_char,
    ) -> *const ::std::ffi::c_char;
}
extern "C" {
    pub fn GeoIP_country_code3_by_addr(
        gi: *mut GeoIP,
        addr: *const ::std::ffi::c_char,
    ) -> *const ::std::ffi::c_char;
}
extern "C" {
    pub fn GeoIP_country_code3_by_name(
        gi: *mut GeoIP,
        host: *const ::std::ffi::c_char,
    ) -> *const ::std::ffi::c_char;
}
extern "C" {
    pub fn GeoIP_country_name_by_addr(
        gi: *mut GeoIP,
        addr: *const ::std::ffi::c_char,
    ) -> *const ::std::ffi::c_char;
}
extern "C" {
    pub fn GeoIP_country_name_by_name(
        gi: *mut GeoIP,
        host: *const ::std::ffi::c_char,
    ) -> *const ::std::ffi::c_char;
}
extern "C" {
    pub fn GeoIP_country_name_by_ipnum(
        gi: *mut GeoIP,
        ipnum: ::std::ffi::c_ulong,
    ) -> *const ::std::ffi::c_char;
}
extern "C" {
    pub fn GeoIP_country_code_by_ipnum(
        gi: *mut GeoIP,
        ipnum: ::std::ffi::c_ulong,
    ) -> *const ::std::ffi::c_char;
}
extern "C" {
    pub fn GeoIP_country_code3_by_ipnum(
        gi: *mut GeoIP,
        ipnum: ::std::ffi::c_ulong,
    ) -> *const ::std::ffi::c_char;
}
extern "C" {
    pub fn GeoIP_country_name_by_ipnum_v6(
        gi: *mut GeoIP,
        ipnum: geoipv6_t,
    ) -> *const ::std::ffi::c_char;
}
extern "C" {
    pub fn GeoIP_country_code_by_ipnum_v6(
        gi: *mut GeoIP,
        ipnum: geoipv6_t,
    ) -> *const ::std::ffi::c_char;
}
extern "C" {
    pub fn GeoIP_country_code3_by_ipnum_v6(
        gi: *mut GeoIP,
        ipnum: geoipv6_t,
    ) -> *const ::std::ffi::c_char;
}
extern "C" {
    pub fn GeoIP_country_code_by_addr_v6(
        gi: *mut GeoIP,
        addr: *const ::std::ffi::c_char,
    ) -> *const ::std::ffi::c_char;
}
extern "C" {
    pub fn GeoIP_country_code_by_name_v6(
        gi: *mut GeoIP,
        host: *const ::std::ffi::c_char,
    ) -> *const ::std::ffi::c_char;
}
extern "C" {
    pub fn GeoIP_country_code3_by_addr_v6(
        gi: *mut GeoIP,
        addr: *const ::std::ffi::c_char,
    ) -> *const ::std::ffi::c_char;
}
extern "C" {
    pub fn GeoIP_country_code3_by_name_v6(
        gi: *mut GeoIP,
        host: *const ::std::ffi::c_char,
    ) -> *const ::std::ffi::c_char;
}
extern "C" {
    pub fn GeoIP_country_name_by_addr_v6(
        gi: *mut GeoIP,
        addr: *const ::std::ffi::c_char,
    ) -> *const ::std::ffi::c_char;
}
extern "C" {
    pub fn GeoIP_country_name_by_name_v6(
        gi: *mut GeoIP,
        host: *const ::std::ffi::c_char,
    ) -> *const ::std::ffi::c_char;
}
extern "C" {
    pub fn GeoIP_id_by_addr(gi: *mut GeoIP, addr: *const ::std::ffi::c_char) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn GeoIP_id_by_name(gi: *mut GeoIP, host: *const ::std::ffi::c_char) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn GeoIP_id_by_ipnum(gi: *mut GeoIP, ipnum: ::std::ffi::c_ulong) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn GeoIP_id_by_addr_v6(
        gi: *mut GeoIP,
        addr: *const ::std::ffi::c_char,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn GeoIP_id_by_name_v6(
        gi: *mut GeoIP,
        host: *const ::std::ffi::c_char,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn GeoIP_id_by_ipnum_v6(gi: *mut GeoIP, ipnum: geoipv6_t) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn GeoIP_region_by_addr(
        gi: *mut GeoIP,
        addr: *const ::std::ffi::c_char,
    ) -> *mut GeoIPRegion;
}
extern "C" {
    pub fn GeoIP_region_by_name(
        gi: *mut GeoIP,
        host: *const ::std::ffi::c_char,
    ) -> *mut GeoIPRegion;
}
extern "C" {
    pub fn GeoIP_region_by_ipnum(gi: *mut GeoIP, ipnum: ::std::ffi::c_ulong) -> *mut GeoIPRegion;
}
extern "C" {
    pub fn GeoIP_region_by_addr_v6(
        gi: *mut GeoIP,
        addr: *const ::std::ffi::c_char,
    ) -> *mut GeoIPRegion;
}
extern "C" {
    pub fn GeoIP_region_by_name_v6(
        gi: *mut GeoIP,
        host: *const ::std::ffi::c_char,
    ) -> *mut GeoIPRegion;
}
extern "C" {
    pub fn GeoIP_region_by_ipnum_v6(gi: *mut GeoIP, ipnum: geoipv6_t) -> *mut GeoIPRegion;
}
extern "C" {
    pub fn GeoIP_assign_region_by_inetaddr(
        gi: *mut GeoIP,
        inetaddr: ::std::ffi::c_ulong,
        gir: *mut GeoIPRegion,
    );
}
extern "C" {
    pub fn GeoIP_assign_region_by_inetaddr_v6(
        gi: *mut GeoIP,
        inetaddr: geoipv6_t,
        gir: *mut GeoIPRegion,
    );
}
extern "C" {
    pub fn GeoIP_name_by_ipnum(
        gi: *mut GeoIP,
        ipnum: ::std::ffi::c_ulong,
    ) -> *mut ::std::ffi::c_char;
}
extern "C" {
    pub fn GeoIP_name_by_addr(
        gi: *mut GeoIP,
        addr: *const ::std::ffi::c_char,
    ) -> *mut ::std::ffi::c_char;
}
extern "C" {
    pub fn GeoIP_name_by_name(
        gi: *mut GeoIP,
        host: *const ::std::ffi::c_char,
    ) -> *mut ::std::ffi::c_char;
}
extern "C" {
    pub fn GeoIP_name_by_ipnum_v6(gi: *mut GeoIP, ipnum: geoipv6_t) -> *mut ::std::ffi::c_char;
}
extern "C" {
    pub fn GeoIP_name_by_addr_v6(
        gi: *mut GeoIP,
        addr: *const ::std::ffi::c_char,
    ) -> *mut ::std::ffi::c_char;
}
extern "C" {
    pub fn GeoIP_name_by_name_v6(
        gi: *mut GeoIP,
        name: *const ::std::ffi::c_char,
    ) -> *mut ::std::ffi::c_char;
}
extern "C" {
    #[doc = " GeoIP_last_netmask is deprecated - it is not thread safe"]
    pub fn GeoIP_last_netmask(gi: *mut GeoIP) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn GeoIP_range_by_ip(
        gi: *mut GeoIP,
        addr: *const ::std::ffi::c_char,
    ) -> *mut *mut ::std::ffi::c_char;
}
extern "C" {
    pub fn GeoIP_country_id_by_addr(
        gi: *mut GeoIP,
        addr: *const ::std::ffi::c_char,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn GeoIP_country_id_by_name(
        gi: *mut GeoIP,
        host: *const ::std::ffi::c_char,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn GeoIP_org_by_addr(
        gi: *mut GeoIP,
        addr: *const ::std::ffi::c_char,
    ) -> *mut ::std::ffi::c_char;
}
extern "C" {
    pub fn GeoIP_org_by_name(
        gi: *mut GeoIP,
        host: *const ::std::ffi::c_char,
    ) -> *mut ::std::ffi::c_char;
}
extern "C" {
    pub fn GeoIP_org_by_ipnum(
        gi: *mut GeoIP,
        ipnum: ::std::ffi::c_ulong,
    ) -> *mut ::std::ffi::c_char;
}
extern "C" {
    pub fn GeoIP_country_id_by_addr_v6(
        gi: *mut GeoIP,
        addr: *const ::std::ffi::c_char,
    ) -> ::std::ffi::c_int;
}
extern "C" {
    pub fn GeoIP_org_by_ipnum_v6(gi: *mut GeoIP, ipnum: geoipv6_t) -> *mut ::std::ffi::c_char;
}
extern "C" {
    pub fn GeoIP_org_by_addr_v6(
        gi: *mut GeoIP,
        addr: *const ::std::ffi::c_char,
    ) -> *mut ::std::ffi::c_char;
}
extern "C" {
    pub fn GeoIP_org_by_name_v6(
        gi: *mut GeoIP,
        name: *const ::std::ffi::c_char,
    ) -> *mut ::std::ffi::c_char;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::ffi::c_uint,
    pub fp_offset: ::std::ffi::c_uint,
    pub overflow_arg_area: *mut ::std::ffi::c_void,
    pub reg_save_area: *mut ::std::ffi::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __va_list_tag"][::std::mem::size_of::<__va_list_tag>() - 24usize];
    ["Alignment of __va_list_tag"][::std::mem::align_of::<__va_list_tag>() - 8usize];
    ["Offset of field: __va_list_tag::gp_offset"]
        [::std::mem::offset_of!(__va_list_tag, gp_offset) - 0usize];
    ["Offset of field: __va_list_tag::fp_offset"]
        [::std::mem::offset_of!(__va_list_tag, fp_offset) - 4usize];
    ["Offset of field: __va_list_tag::overflow_arg_area"]
        [::std::mem::offset_of!(__va_list_tag, overflow_arg_area) - 8usize];
    ["Offset of field: __va_list_tag::reg_save_area"]
        [::std::mem::offset_of!(__va_list_tag, reg_save_area) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
